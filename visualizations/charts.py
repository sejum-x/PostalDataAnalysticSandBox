"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É Data Warehouse
–ü—Ä–∞—Ü—é—î –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é –¥–∞–Ω–∏—Ö
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import json
import os
import sys
import glob
from datetime import datetime
import warnings

warnings.filterwarnings('ignore')
plt.style.use('default')
sns.set_palette("husl")

sys.path.append('..')
from config.database_config import DatabaseConfig

class DWChartGenerator:
    def __init__(self):
        self.config = DatabaseConfig()
        plt.rcParams['figure.figsize'] = (12, 8)
        plt.rcParams['font.size'] = 10

    def get_latest_analysis_files(self):
        """–û—Ç—Ä–∏–º—É—î –Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Ñ–∞–π–ª–∏ –∞–Ω–∞–ª—ñ–∑—ñ–≤"""
        patterns = {
            'courier': 'courier_performance_analysis_*.json',
            'department': 'department_workload_analysis_*.json',
            'processing': 'processing_time_analysis_*.json',
            'transport': 'transport_utilization_analysis_*.json'
        }

        files = {}
        for key, pattern in patterns.items():
            file_pattern = os.path.join(self.config.PROCESSED_DATA_PATH, pattern)
            matching_files = glob.glob(file_pattern)
            if matching_files:
                files[key] = max(matching_files, key=os.path.getctime)
            else:
                files[key] = None

        return files

    def load_analysis_data(self, filepath):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É –∑ JSON"""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {filepath}: {e}")
            return None

    def create_courier_performance_charts(self):
        """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫—É—Ä'—î—Ä—ñ–≤"""
        files = self.get_latest_analysis_files()

        if not files['courier']:
            print("‚ùå –§–∞–π–ª –∞–Ω–∞–ª—ñ–∑—É –∫—É—Ä'—î—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        data = self.load_analysis_data(files['courier'])
        if not data:
            return

        print("üìà –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∫—É—Ä'—î—Ä—ñ–≤...")

        # –¢–æ–ø –∫—É—Ä'—î—Ä–∏ –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é
        if 'top_couriers' in data:
            top_couriers = data['top_couriers']

            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

            # –ì—Ä–∞—Ñ—ñ–∫ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            courier_names = [f"–ö—É—Ä'—î—Ä {i+1}" for i in range(len(top_couriers))]
            efficiency_scores = [courier['efficiency_score'] for courier in top_couriers.values()]

            ax1.bar(courier_names, efficiency_scores, color='skyblue')
            ax1.set_title('–¢–æ–ø-10 –∫—É—Ä\'—î—Ä—ñ–≤ –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é')
            ax1.set_ylabel('–†–µ–π—Ç–∏–Ω–≥ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ')
            ax1.tick_params(axis='x', rotation=45)

            # –ì—Ä–∞—Ñ—ñ–∫ —á–∞—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_times = [courier['avg_delivery_time'] for courier in top_couriers.values()]

            ax2.bar(courier_names, delivery_times, color='lightcoral')
            ax2.set_title('–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–ø –∫—É—Ä\'—î—Ä—ñ–≤')
            ax2.set_ylabel('–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ö–≤)')
            ax2.tick_params(axis='x', rotation=45)

            plt.tight_layout()

            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            chart_path = os.path.join(self.config.CHARTS_PATH, f'courier_performance_{timestamp}.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()

            print(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –∫—É—Ä'—î—Ä—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(chart_path)}")

    def create_department_workload_charts(self):
        """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å"""
        files = self.get_latest_analysis_files()

        if not files['department']:
            print("‚ùå –§–∞–π–ª –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        data = self.load_analysis_data(files['department'])
        if not data:
            return

        print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å...")

        # –ê–Ω–∞–ª—ñ–∑ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö
        if 'region_analysis' in data:
            regions = data['region_analysis']

            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

            region_names = list(regions.keys())[:10]  # –¢–æ–ø 10 —Ä–µ–≥—ñ–æ–Ω—ñ–≤
            deliveries = [regions[region]['total_deliveries'] for region in region_names]
            processing_times = [regions[region]['avg_processing_time'] for region in region_names]

            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö
            ax1.bar(region_names, deliveries, color='lightgreen')
            ax1.set_title('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö')
            ax1.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫')
            ax1.tick_params(axis='x', rotation=45)

            # –ß–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö
            ax2.bar(region_names, processing_times, color='orange')
            ax2.set_title('–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö')
            ax2.set_ylabel('–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ (–≥–æ–¥)')
            ax2.tick_params(axis='x', rotation=45)

            plt.tight_layout()

            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            chart_path = os.path.join(self.config.CHARTS_PATH, f'department_workload_{timestamp}.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()

            print(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(chart_path)}")

    def create_transport_utilization_charts(self):
        """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É"""
        files = self.get_latest_analysis_files()

        if not files['transport']:
            print("‚ùå –§–∞–π–ª –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        data = self.load_analysis_data(files['transport'])
        if not data:
            return

        print("üöõ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É...")

        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
        if 'transport_utilization' in data:
            transport_data = data['transport_utilization']

            fig, ax = plt.subplots(figsize=(12, 8))

            transport_names = list(transport_data.keys())[:8]  # –¢–æ–ø 8 —Ç–∏–ø—ñ–≤
            utilization_scores = [transport_data[transport]['utilization_score'] for transport in transport_names]

            # –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π bar chart
            y_pos = range(len(transport_names))
            ax.barh(y_pos, utilization_scores, color='purple', alpha=0.7)
            ax.set_yticks(y_pos)
            ax.set_yticklabels([name.replace('_', ' ').title() for name in transport_names])
            ax.set_xlabel('–†–µ–π—Ç–∏–Ω–≥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')
            ax.set_title('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É')

            plt.tight_layout()

            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            chart_path = os.path.join(self.config.CHARTS_PATH, f'transport_utilization_{timestamp}.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()

            print(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(chart_path)}")

    def create_all_charts(self):
        """–°—Ç–≤–æ—Ä—é—î –≤—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏"""
        print("üé® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤...")

        charts_created = []

        try:
            self.create_courier_performance_charts()
            charts_created.append("–ö—É—Ä'—î—Ä–∏")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∫—É—Ä'—î—Ä—ñ–≤: {e}")

        try:
            self.create_department_workload_charts()
            charts_created.append("–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å: {e}")

        try:
            self.create_transport_utilization_charts()
            charts_created.append("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É: {e}")

        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –≥—Ä–∞—Ñ—ñ–∫–∏ –¥–ª—è: {', '.join(charts_created)}")
        return charts_created