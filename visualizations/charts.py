"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É Data Warehouse
–ü—Ä–∞—Ü—é—î –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é –æ–∫—Ä–µ–º–∏—Ö JSON —Ñ–∞–π–ª—ñ–≤
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import json
import os
import sys
import glob
from datetime import datetime
import warnings
import numpy as np
import traceback

warnings.filterwarnings('ignore')
plt.style.use('default')
sns.set_palette("husl")

sys.path.append('..')
from config.database_config import DatabaseConfig

class DWChartGenerator:
    def __init__(self):
        self.config = DatabaseConfig()
        plt.rcParams['figure.figsize'] = (12, 8)
        plt.rcParams['font.size'] = 10

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        os.makedirs(self.config.CHARTS_PATH, exist_ok=True)
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤: {self.config.CHARTS_PATH}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–∞–Ω–∏—Ö: {self.config.PROCESSED_DATA_PATH}")

    def get_latest_files_by_pattern(self, pattern):
        """–û—Ç—Ä–∏–º—É—î –Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Ñ–∞–π–ª–∏ –∑–∞ –ø–∞—Ç–µ—Ä–Ω–æ–º"""
        file_pattern = os.path.join(self.config.PROCESSED_DATA_PATH, pattern)
        print(f"üîç –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª–∏ –∑–∞ –ø–∞—Ç–µ—Ä–Ω–æ–º: {file_pattern}")

        matching_files = glob.glob(file_pattern)
        print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {len(matching_files)}")

        if matching_files:
            latest_file = max(matching_files, key=os.path.getctime)
            print(f"üìÑ –ù–∞–π–Ω–æ–≤—ñ—à–∏–π —Ñ–∞–π–ª: {latest_file}")
            return latest_file
        else:
            print(f"‚ùå –§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –ø–∞—Ç–µ—Ä–Ω–æ–º: {pattern}")
            return None

    def load_json_data(self, filepath):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ JSON —Ñ–∞–π–ª—É"""
        try:
            if not filepath:
                print("‚ùå –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
                return None

            if not os.path.exists(filepath):
                print(f"‚ùå –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î: {filepath}")
                return None

            print(f"üìñ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª: {os.path.basename(filepath)}")

            with open(filepath, 'r', encoding='utf-8') as f:
                data = json.load(f)

            if isinstance(data, dict) and 'data' in data:
                data_size = len(data['data']) if data['data'] else 0
                print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {data_size}")
            else:
                print(f"‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö: {type(data)}")

            return data

        except json.JSONDecodeError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ JSON –≤ —Ñ–∞–π–ª—ñ {filepath}: {e}")
            return None
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {filepath}: {e}")
            return None

    def create_courier_performance_charts(self):
        """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫—É—Ä'—î—Ä—ñ–≤"""
        print("üìà –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∫—É—Ä'—î—Ä—ñ–≤...")
        print("=" * 50)

        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ —Ç–æ–ø –∫—É—Ä'—î—Ä—ñ–≤
            print("üîç –ü–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤ –∫—É—Ä'—î—Ä—ñ–≤...")
            top_couriers_file = self.get_latest_files_by_pattern('courier_top_performers_*.json')
            general_stats_file = self.get_latest_files_by_pattern('courier_general_stats_*.json')
            region_analysis_file = self.get_latest_files_by_pattern('courier_region_analysis_*.json')

            if not top_couriers_file:
                print("‚ùå –§–∞–π–ª —Ç–æ–ø –∫—É—Ä'—î—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —è–∫—ñ —Ñ–∞–π–ª–∏ –∫—É—Ä'—î—Ä—ñ–≤ –≤–∑–∞–≥–∞–ª—ñ —î
                all_courier_files = glob.glob(os.path.join(self.config.PROCESSED_DATA_PATH, 'courier_*.json'))
                print(f"üìã –í—Å—ñ —Ñ–∞–π–ª–∏ –∫—É—Ä'—î—Ä—ñ–≤: {[os.path.basename(f) for f in all_courier_files]}")
                return False

            print("üìñ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫—É—Ä'—î—Ä—ñ–≤...")
            top_couriers_data = self.load_json_data(top_couriers_file)
            general_stats_data = self.load_json_data(general_stats_file) if general_stats_file else None
            region_data = self.load_json_data(region_analysis_file) if region_analysis_file else None

            if not top_couriers_data:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —Ç–æ–ø –∫—É—Ä'—î—Ä—ñ–≤")
                return False

            if 'data' not in top_couriers_data:
                print(f"‚ùå –ù–µ–º–∞—î —Å–µ–∫—Ü—ñ—ó 'data' –≤ —Ñ–∞–π–ª—ñ. –ö–ª—é—á—ñ: {list(top_couriers_data.keys())}")
                return False

            if not top_couriers_data['data']:
                print("‚ùå –°–µ–∫—Ü—ñ—è 'data' –ø–æ—Ä–æ–∂–Ω—è")
                return False

            print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–∞–Ω–∏—Ö –∫—É—Ä'—î—Ä—ñ–≤: {len(top_couriers_data['data'])}")

            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö
            first_courier_key = list(top_couriers_data['data'].keys())[0]
            first_courier_data = top_couriers_data['data'][first_courier_key]
            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö –∫—É—Ä'—î—Ä–∞: {list(first_courier_data.keys())}")

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–≥—É—Ä—É –∑ –ø—ñ–¥–≥—Ä–∞—Ñ—ñ–∫–∞–º–∏
            print("üé® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–≥—É—Ä–∏...")
            fig = plt.figure(figsize=(20, 12))

            # 1. –¢–æ–ø –∫—É—Ä'—î—Ä–∏ –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é
            print("üìà –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...")
            ax1 = plt.subplot(2, 3, 1)

            # –ë–µ—Ä–µ–º–æ —Ç–æ–ø 10 –∫—É—Ä'—î—Ä—ñ–≤
            couriers = list(top_couriers_data['data'].items())[:10]
            print(f"üë• –û–±—Ä–æ–±–ª—è—î–º–æ {len(couriers)} –∫—É—Ä'—î—Ä—ñ–≤")

            courier_names = []
            efficiency_scores = []

            for i, (key, courier) in enumerate(couriers):
                courier_id = courier.get('courier_id', i+1)
                efficiency = courier.get('efficiency_score', 0)

                courier_names.append(f"ID {courier_id}")
                efficiency_scores.append(efficiency)

                print(f"  –ö—É—Ä'—î—Ä {courier_id}: –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å = {efficiency}")

            if not any(efficiency_scores):
                print("‚ùå –í—Å—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ = 0")
                return False

            print(f"üìä –î—ñ–∞–ø–∞–∑–æ–Ω –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {min(efficiency_scores)} - {max(efficiency_scores)}")

            bars = ax1.bar(range(len(courier_names)), efficiency_scores, color='skyblue', alpha=0.8)
            ax1.set_title('–¢–æ–ø-10 –∫—É—Ä\'—î—Ä—ñ–≤ –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é', fontsize=12, fontweight='bold')
            ax1.set_ylabel('–†–µ–π—Ç–∏–Ω–≥ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ')
            ax1.set_xlabel('–ö—É—Ä\'—î—Ä–∏')
            ax1.set_xticks(range(len(courier_names)))
            ax1.set_xticklabels(courier_names, rotation=45)

            # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ–≤–ø—Ü—ñ
            for bar, score in zip(bars, efficiency_scores):
                if score > 0:
                    ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5,
                            f'{score:.1f}', ha='center', va='bottom', fontsize=8)

            # 2. –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏
            print("‚è±Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ —á–∞—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏...")
            ax2 = plt.subplot(2, 3, 2)
            delivery_times = []

            for key, courier in couriers:
                delivery_time = courier.get('avg_delivery_time', 0)
                delivery_times.append(delivery_time)
                print(f"  –ö—É—Ä'—î—Ä {courier.get('courier_id', 'N/A')}: —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ = {delivery_time}")

            print(f"üìä –î—ñ–∞–ø–∞–∑–æ–Ω —á–∞—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏: {min(delivery_times)} - {max(delivery_times)}")

            bars2 = ax2.bar(range(len(courier_names)), delivery_times, color='lightcoral', alpha=0.8)
            ax2.set_title('–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–ø –∫—É—Ä\'—î—Ä—ñ–≤', fontsize=12, fontweight='bold')
            ax2.set_ylabel('–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ö–≤)')
            ax2.set_xlabel('–ö—É—Ä\'—î—Ä–∏')
            ax2.set_xticks(range(len(courier_names)))
            ax2.set_xticklabels(courier_names, rotation=45)

            for bar, time in zip(bars2, delivery_times):
                if time > 0:
                    ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(delivery_times)*0.01,
                            f'{time:.0f}', ha='center', va='bottom', fontsize=8)

            # 3. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫
            print("üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞–≤–æ–∫...")
            ax3 = plt.subplot(2, 3, 3)
            total_deliveries = []

            for key, courier in couriers:
                deliveries = courier.get('total_deliveries', 0)
                total_deliveries.append(deliveries)
                print(f"  –ö—É—Ä'—î—Ä {courier.get('courier_id', 'N/A')}: –¥–æ—Å—Ç–∞–≤–æ–∫ = {deliveries}")

            print(f"üìä –î—ñ–∞–ø–∞–∑–æ–Ω –¥–æ—Å—Ç–∞–≤–æ–∫: {min(total_deliveries)} - {max(total_deliveries)}")

            bars3 = ax3.bar(range(len(courier_names)), total_deliveries, color='lightgreen', alpha=0.8)
            ax3.set_title('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫ —Ç–æ–ø –∫—É—Ä\'—î—Ä—ñ–≤', fontsize=12, fontweight='bold')
            ax3.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫')
            ax3.set_xlabel('–ö—É—Ä\'—î—Ä–∏')
            ax3.set_xticks(range(len(courier_names)))
            ax3.set_xticklabels(courier_names, rotation=45)

            for bar, count in zip(bars3, total_deliveries):
                if count > 0:
                    ax3.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(total_deliveries)*0.01,
                            f'{count}', ha='center', va='bottom', fontsize=8)

            # 4. –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—è–∫—â–æ —î)
            if general_stats_data and 'data' in general_stats_data:
                print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
                ax4 = plt.subplot(2, 3, 4)
                stats = general_stats_data['data']

                print(f"üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")

                labels = ['–í—Å—å–æ–≥–æ –∫—É—Ä\'—î—Ä—ñ–≤', '–í—Å—å–æ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫', '–†–µ–≥—ñ–æ–Ω—ñ–≤', '–ú—ñ—Å—Ç']
                values = [
                    stats.get('total_couriers', 0),
                    stats.get('total_deliveries', 0),
                    stats.get('total_regions', 0),
                    stats.get('total_cities', 0)
                ]

                colors = ['#FF9999', '#66B2FF', '#99FF99', '#FFCC99']
                bars4 = ax4.bar(labels, values, color=colors)
                ax4.set_title('–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä\'—î—Ä—ñ–≤', fontsize=12, fontweight='bold')
                ax4.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
                ax4.tick_params(axis='x', rotation=45)

                for bar, value in zip(bars4, values):
                    if value > 0:
                        ax4.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(values)*0.01,
                                f'{value}', ha='center', va='bottom', fontsize=9)

            # 5. –ê–Ω–∞–ª—ñ–∑ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö (—è–∫—â–æ —î)
            if region_data and 'data' in region_data and region_data['data']:
                print("üó∫Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö...")
                ax5 = plt.subplot(2, 3, 5)
                regions = list(region_data['data'].items())[:8]  # –¢–æ–ø 8 —Ä–µ–≥—ñ–æ–Ω—ñ–≤

                print(f"üåç –†–µ–≥—ñ–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {len(regions)}")

                if regions:
                    region_names = [region[0].replace('_', ' ')[:15] for region in regions]
                    region_deliveries = [region[1].get('total_deliveries', 0) for region in regions]

                    for name, deliveries in zip(region_names, region_deliveries):
                        print(f"  –†–µ–≥—ñ–æ–Ω {name}: {deliveries} –¥–æ—Å—Ç–∞–≤–æ–∫")

                    bars5 = ax5.barh(range(len(region_names)), region_deliveries, color='purple', alpha=0.7)
                    ax5.set_title('–î–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö', fontsize=12, fontweight='bold')
                    ax5.set_xlabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫')
                    ax5.set_yticks(range(len(region_names)))
                    ax5.set_yticklabels(region_names)

                    for bar, value in zip(bars5, region_deliveries):
                        if value > 0:
                            ax5.text(bar.get_width() + max(region_deliveries)*0.01,
                                    bar.get_y() + bar.get_height()/2,
                                    f'{value}', ha='left', va='center', fontsize=8)

            # 6. –†–æ–∑–ø–æ–¥—ñ–ª —á–∞—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∞)
            print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ —á–∞—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏...")
            ax6 = plt.subplot(2, 3, 6)
            all_delivery_times = []

            for courier in top_couriers_data['data'].values():
                delivery_time = courier.get('avg_delivery_time', 0)
                if delivery_time > 0:
                    all_delivery_times.append(delivery_time)

            print(f"‚è±Ô∏è –ß–∞—Å—ñ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏: {len(all_delivery_times)}")

            if all_delivery_times and len(all_delivery_times) > 1:
                bins_count = min(15, len(all_delivery_times))
                print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å bins: {bins_count}")

                ax6.hist(all_delivery_times, bins=bins_count,
                        color='orange', alpha=0.7, edgecolor='black')
                ax6.set_title('–†–æ–∑–ø–æ–¥—ñ–ª —á–∞—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏', fontsize=12, fontweight='bold')
                ax6.set_xlabel('–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ö–≤)')
                ax6.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É—Ä\'—î—Ä—ñ–≤')

                mean_time = np.mean(all_delivery_times)
                ax6.axvline(mean_time, color='red', linestyle='--',
                           label=f'–°–µ—Ä–µ–¥–Ω—î: {mean_time:.1f} —Ö–≤')
                ax6.legend()

                print(f"üìä –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {mean_time:.1f} —Ö–≤")

            print("üé® –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞–∫–µ—Ç—É...")
            plt.tight_layout()

            print("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞...")
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            chart_path = os.path.join(self.config.CHARTS_PATH, f'courier_performance_{timestamp}.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()

            print(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –∫—É—Ä'—î—Ä—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(chart_path)}")
            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∫—É—Ä'—î—Ä—ñ–≤: {e}")
            print(f"üîç –î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {traceback.format_exc()}")
            plt.close('all')  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ —Ñ—ñ–≥—É—Ä–∏
            return False

    def create_processing_time_charts(self):
        """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫–∏ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏"""
        print("‚è±Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏...")
        print("=" * 50)

        try:
            print("üîç –ü–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏...")
            general_stats_file = self.get_latest_files_by_pattern('processing_time_general_stats_*.json')
            trends_file = self.get_latest_files_by_pattern('processing_time_trends_*.json')
            period_comparison_file = self.get_latest_files_by_pattern('processing_time_period_comparison_*.json')
            region_analysis_file = self.get_latest_files_by_pattern('processing_time_region_analysis_*.json')

            if not general_stats_file:
                print("‚ùå –§–∞–π–ª–∏ –∞–Ω–∞–ª—ñ–∑—É —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —è–∫—ñ —Ñ–∞–π–ª–∏ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏ –≤–∑–∞–≥–∞–ª—ñ —î
                all_processing_files = glob.glob(os.path.join(self.config.PROCESSED_DATA_PATH, 'processing_time_*.json'))
                print(f"üìã –í—Å—ñ —Ñ–∞–π–ª–∏ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏: {[os.path.basename(f) for f in all_processing_files]}")
                return False

            print("üìñ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏...")
            general_data = self.load_json_data(general_stats_file)
            trends_data = self.load_json_data(trends_file) if trends_file else None
            comparison_data = self.load_json_data(period_comparison_file) if period_comparison_file else None
            region_data = self.load_json_data(region_analysis_file) if region_analysis_file else None

            if not general_data:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏")
                return False

            if 'data' not in general_data:
                print(f"‚ùå –ù–µ–º–∞—î —Å–µ–∫—Ü—ñ—ó 'data' –≤ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö. –ö–ª—é—á—ñ: {list(general_data.keys())}")
                return False

            print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {general_data['data']}")

            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ
            if trends_data and 'data' in trends_data:
                print(f"üìä –¢—Ä–µ–Ω–¥–∏: {len(trends_data['data'])} –∑–∞–ø–∏—Å—ñ–≤")
            if comparison_data and 'data' in comparison_data:
                print(f"üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—ñ–≤: {len(comparison_data['data'])} –∑–∞–ø–∏—Å—ñ–≤")
            if region_data and 'data' in region_data:
                print(f"üìä –†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ: {len(region_data['data'])} –∑–∞–ø–∏—Å—ñ–≤")

            print("üé® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–≥—É—Ä–∏...")
            fig = plt.figure(figsize=(20, 12))

            # 1. –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏
            print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            ax1 = plt.subplot(2, 3, 1)
            stats = general_data['data']

            labels = ['–°–µ—Ä–µ–¥–Ω—ñ–π\n—á–∞—Å', '–ú–µ–¥—ñ–∞–Ω–Ω–∏–π\n—á–∞—Å', '–ú—ñ–Ω.\n—á–∞—Å', '–ú–∞–∫—Å.\n—á–∞—Å']
            values = [
                stats.get('avg_processing_time', 0),
                stats.get('median_processing_time', 0),
                stats.get('min_processing_time', 0),
                stats.get('max_processing_time', 0)
            ]

            print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Å—É: {dict(zip(labels, values))}")

            colors = ['#FF7675', '#74B9FF', '#00B894', '#FDCB6E']
            bars = ax1.bar(labels, values, color=colors, alpha=0.8)
            ax1.set_title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏', fontsize=12, fontweight='bold')
            ax1.set_ylabel('–ß–∞—Å (–≥–æ–¥–∏–Ω–∏)')

            for bar, value in zip(bars, values):
                if value > 0:
                    ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(values)*0.01,
                            f'{value:.1f}', ha='center', va='bottom', fontsize=9)

            # 2. –¢—Ä–µ–Ω–¥–∏ –ø–æ —Ç–∏–ø–∞—Ö –ø–æ—Å–∏–ª–æ–∫
            if trends_data and 'data' in trends_data and trends_data['data']:
                print("üìà –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ —Ç—Ä–µ–Ω–¥—ñ–≤...")
                ax2 = plt.subplot(2, 3, 2)

                # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ç–∏–ø–∞—Ö –ø–æ—Å–∏–ª–æ–∫
                parcel_trends = {}
                for key, value in trends_data['data'].items():
                    parcel_type = value.get('parcel_type_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
                    period = value.get('period', key.split('_')[0] if '_' in key else 'Unknown')

                    if parcel_type not in parcel_trends:
                        parcel_trends[parcel_type] = {'periods': [], 'times': []}

                    parcel_trends[parcel_type]['periods'].append(period)
                    parcel_trends[parcel_type]['times'].append(value.get('avg_processing_time', 0))

                print(f"üìä –¢–∏–ø—ñ–≤ –ø–æ—Å–∏–ª–æ–∫ –¥–ª—è —Ç—Ä–µ–Ω–¥—ñ–≤: {len(parcel_trends)}")

                if parcel_trends:
                    colors = plt.cm.tab10(np.linspace(0, 1, len(parcel_trends)))
                    plotted = 0
                    for i, (parcel_type, data) in enumerate(list(parcel_trends.items())[:5]):  # –¢–æ–ø 5
                        if data['periods'] and data['times'] and any(data['times']):
                            print(f"  üìà {parcel_type}: {len(data['periods'])} –ø–µ—Ä—ñ–æ–¥—ñ–≤")
                            ax2.plot(data['periods'], data['times'], marker='o',
                                    label=parcel_type[:15], color=colors[i], linewidth=2)
                            plotted += 1

                    if plotted > 0:
                        ax2.set_title('–¢—Ä–µ–Ω–¥–∏ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏ –ø–æ —Ç–∏–ø–∞—Ö –ø–æ—Å–∏–ª–æ–∫', fontsize=12, fontweight='bold')
                        ax2.set_ylabel('–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ (–≥–æ–¥)')
                        ax2.set_xlabel('–ü–µ—Ä—ñ–æ–¥')
                        ax2.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
                        ax2.tick_params(axis='x', rotation=45)
                        ax2.grid(True, alpha=0.3)

            # 3. –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—ñ–≤
            if comparison_data and 'data' in comparison_data and comparison_data['data']:
                print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—ñ–≤...")
                ax3 = plt.subplot(2, 3, 3)
                periods = list(comparison_data['data'].items())

                print(f"üìÖ –ü–µ—Ä—ñ–æ–¥—ñ–≤ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {len(periods)}")

                if periods:
                    period_names = [period[0] for period in periods]
                    avg_times = [period[1].get('avg_processing_time', 0) for period in periods]

                    for name, time in zip(period_names, avg_times):
                        print(f"  üìÖ {name}: {time:.1f} –≥–æ–¥")

                    if any(avg_times):
                        bars = ax3.bar(range(len(period_names)), avg_times, color='#A29BFE', alpha=0.8)
                        ax3.set_title('–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö', fontsize=12, fontweight='bold')
                        ax3.set_ylabel('–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ (–≥–æ–¥)')
                        ax3.set_xlabel('–ü–µ—Ä—ñ–æ–¥')
                        ax3.set_xticks(range(len(period_names)))
                        ax3.set_xticklabels(period_names, rotation=45)

                        for bar, time in zip(bars, avg_times):
                            if time > 0:
                                ax3.text(bar.get_x() + bar.get_width()/2,
                                        bar.get_height() + max(avg_times)*0.01,
                                        f'{time:.1f}', ha='center', va='bottom', fontsize=8)

            # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ —ñ–Ω—à–∏–º–∏ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏...
            print("üé® –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞–∫–µ—Ç—É...")
            plt.tight_layout()

            print("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞...")
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            chart_path = os.path.join(self.config.CHARTS_PATH, f'processing_time_analysis_{timestamp}.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()

            print(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(chart_path)}")
            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏: {e}")
            print(f"üîç –î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {traceback.format_exc()}")
            plt.close('all')
            return False

    # –Ü–Ω—à—ñ –º–µ—Ç–æ–¥–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω...
    def create_department_workload_charts(self):
        """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å"""
        print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å...")

        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∞–Ω–∞–ª—ñ–∑—ñ–≤ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å
            general_stats_file = self.get_latest_files_by_pattern('department_general_stats_*.json')
            period_summary_file = self.get_latest_files_by_pattern('department_period_summary_*.json')
            region_analysis_file = self.get_latest_files_by_pattern('department_region_analysis_*.json')
            type_analysis_file = self.get_latest_files_by_pattern('department_type_analysis_*.json')
            top_busy_file = self.get_latest_files_by_pattern('department_top_busy_*.json')

            if not general_stats_file:
                print("‚ùå –§–∞–π–ª–∏ –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False

            general_data = self.load_json_data(general_stats_file)
            period_data = self.load_json_data(period_summary_file) if period_summary_file else None
            region_data = self.load_json_data(region_analysis_file) if region_analysis_file else None
            type_data = self.load_json_data(type_analysis_file) if type_analysis_file else None
            busy_data = self.load_json_data(top_busy_file) if top_busy_file else None

            if not general_data or 'data' not in general_data:
                print("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è")
                return False

            fig = plt.figure(figsize=(20, 12))

            # 1. –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å
            ax1 = plt.subplot(2, 3, 1)
            stats = general_data['data']

            labels = ['–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è', '–î–æ—Å—Ç–∞–≤–∫–∏', '–†–µ–≥—ñ–æ–Ω–∏', '–ú—ñ—Å—Ç–∞', '–ü–µ—Ä—ñ–æ–¥–∏']
            values = [
                stats.get('total_departments', 0),
                stats.get('total_deliveries', 0),
                stats.get('total_regions', 0),
                stats.get('total_cities', 0),
                stats.get('total_periods', 0)
            ]

            colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7']
            bars = ax1.bar(labels, values, color=colors, alpha=0.8)
            ax1.set_title('–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å', fontsize=12, fontweight='bold')
            ax1.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
            ax1.tick_params(axis='x', rotation=45)

            for bar, value in zip(bars, values):
                if value > 0:
                    ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(values)*0.01,
                            f'{value:,}', ha='center', va='bottom', fontsize=9)

            # 2. –î–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö
            if period_data and 'data' in period_data and period_data['data']:
                ax2 = plt.subplot(2, 3, 2)
                periods = list(period_data['data'].items())

                if periods:
                    period_names = [period[0] for period in periods]
                    period_deliveries = [period[1].get('total_deliveries', 0) for period in periods]

                    ax2.plot(period_names, period_deliveries, marker='o', linewidth=2, markersize=6, color='#E17055')
                    ax2.set_title('–î–∏–Ω–∞–º—ñ–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö', fontsize=12, fontweight='bold')
                    ax2.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫')
                    ax2.set_xlabel('–ü–µ—Ä—ñ–æ–¥')
                    ax2.tick_params(axis='x', rotation=45)
                    ax2.grid(True, alpha=0.3)

            # 3. –ê–Ω–∞–ª—ñ–∑ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö
            if region_data and 'data' in region_data and region_data['data']:
                ax3 = plt.subplot(2, 3, 3)
                regions = list(region_data['data'].items())[:10]

                if regions:
                    region_names = [region[0].replace('_', ' ')[:15] for region in regions]
                    region_deliveries = [region[1].get('total_deliveries', 0) for region in regions]

                    bars = ax3.barh(range(len(region_names)), region_deliveries, color='#74B9FF', alpha=0.8)
                    ax3.set_title('–î–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö', fontsize=12, fontweight='bold')
                    ax3.set_xlabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫')
                    ax3.set_yticks(range(len(region_names)))
                    ax3.set_yticklabels(region_names)

                    for bar, value in zip(bars, region_deliveries):
                        if value > 0:
                            ax3.text(bar.get_width() + max(region_deliveries)*0.01,
                                    bar.get_y() + bar.get_height()/2,
                                    f'{value:,}', ha='left', va='center', fontsize=8)

            # 4. –ê–Ω–∞–ª—ñ–∑ –ø–æ —Ç–∏–ø–∞—Ö –≤—ñ–¥–¥—ñ–ª–µ–Ω—å
            if type_data and 'data' in type_data and type_data['data']:
                ax4 = plt.subplot(2, 3, 4)

                # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ç–∏–ø–∞—Ö –≤—ñ–¥–¥—ñ–ª–µ–Ω—å
                dept_types = {}
                for key, value in type_data['data'].items():
                    dept_type = value.get('department_type', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
                    if dept_type not in dept_types:
                        dept_types[dept_type] = 0
                    dept_types[dept_type] += value.get('total_deliveries', 0)

                if dept_types:
                    labels = list(dept_types.keys())
                    sizes = list(dept_types.values())
                    colors = plt.cm.Set3(np.linspace(0, 1, len(labels)))

                    wedges, texts, autotexts = ax4.pie(sizes, labels=labels, autopct='%1.1f%%',
                                                      colors=colors, startangle=90)
                    ax4.set_title('–†–æ–∑–ø–æ–¥—ñ–ª –¥–æ—Å—Ç–∞–≤–æ–∫ –ø–æ —Ç–∏–ø–∞—Ö –≤—ñ–¥–¥—ñ–ª–µ–Ω—å', fontsize=12, fontweight='bold')

            # 5. –ß–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö
            if region_data and 'data' in region_data and region_data['data']:
                ax5 = plt.subplot(2, 3, 5)
                regions = list(region_data['data'].items())[:8]

                if regions:
                    region_names = [region[0].replace('_', ' ')[:12] for region in regions]
                    processing_times = [region[1].get('avg_processing_time', 0) for region in regions]

                    if any(processing_times):
                        bars = ax5.bar(range(len(region_names)), processing_times, color='#FD79A8', alpha=0.8)
                        ax5.set_title('–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö', fontsize=12, fontweight='bold')
                        ax5.set_ylabel('–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ (–≥–æ–¥)')
                        ax5.set_xlabel('–†–µ–≥—ñ–æ–Ω')
                        ax5.set_xticks(range(len(region_names)))
                        ax5.set_xticklabels(region_names, rotation=45)

                        for bar, time in zip(bars, processing_times):
                            if time > 0:
                                ax5.text(bar.get_x() + bar.get_width()/2,
                                        bar.get_height() + max(processing_times)*0.01,
                                        f'{time:.1f}', ha='center', va='bottom', fontsize=8)

            # 6. –¢–æ–ø –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è (—è–∫—â–æ —î –¥–∞–Ω—ñ)
            if busy_data and 'data' in busy_data and busy_data['data']:
                ax6 = plt.subplot(2, 3, 6)

                # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –ø–µ—Ä—ñ–æ–¥ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –¥–∞–Ω–∏—Ö
                first_period = list(busy_data['data'].keys())[0] if busy_data['data'] else None
                if first_period and busy_data['data'][first_period]:
                    top_depts = list(busy_data['data'][first_period].items())[:8]

                    if top_depts:
                        dept_names = [f"–í—ñ–¥–¥. {dept[1].get('department_id', i+1)}" for i, dept in enumerate(top_depts)]
                        workload_scores = [dept[1].get('period_workload_score', 0) for dept in top_depts]

                        if any(workload_scores):
                            bars = ax6.barh(range(len(dept_names)), workload_scores, color='#FDCB6E', alpha=0.8)
                            ax6.set_title(f'–¢–æ–ø –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ({first_period})', fontsize=12, fontweight='bold')
                            ax6.set_xlabel('–†–µ–π—Ç–∏–Ω–≥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ—Å—Ç—ñ')
                            ax6.set_yticks(range(len(dept_names)))
                            ax6.set_yticklabels(dept_names)

                            for bar, score in zip(bars, workload_scores):
                                if score > 0:
                                    ax6.text(bar.get_width() + max(workload_scores)*0.01,
                                            bar.get_y() + bar.get_height()/2,
                                            f'{score:.1f}', ha='left', va='center', fontsize=8)

            plt.tight_layout()

            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            chart_path = os.path.join(self.config.CHARTS_PATH, f'department_workload_{timestamp}.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()

            print(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(chart_path)}")
            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å: {e}")
            plt.close('all')
            return False

    def create_transport_utilization_charts(self):
        """–°—Ç–≤–æ—Ä—é—î —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É"""
        print("üöõ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É...")
        print("=" * 50)

        try:
            print("üîç –ü–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É...")
            general_stats_file = self.get_latest_files_by_pattern('transport_general_stats_*.json')
            period_usage_file = self.get_latest_files_by_pattern('transport_period_usage_*.json')
            trends_file = self.get_latest_files_by_pattern('transport_trends_*.json')
            efficiency_file = self.get_latest_files_by_pattern('transport_efficiency_*.json')
            most_used_file = self.get_latest_files_by_pattern('transport_most_used_*.json')
            region_analysis_file = self.get_latest_files_by_pattern('transport_region_analysis_*.json')
            parcel_analysis_file = self.get_latest_files_by_pattern('transport_parcel_analysis_*.json')
            changes_file = self.get_latest_files_by_pattern('transport_changes_*.json')

            if not general_stats_file:
                print("‚ùå –§–∞–π–ª–∏ –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                all_transport_files = glob.glob(os.path.join(self.config.PROCESSED_DATA_PATH, 'transport_*.json'))
                print(f"üìã –í—Å—ñ —Ñ–∞–π–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É: {[os.path.basename(f) for f in all_transport_files]}")
                return False

            print("üìñ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É...")
            general_data = self.load_json_data(general_stats_file)
            usage_data = self.load_json_data(period_usage_file) if period_usage_file else None
            trends_data = self.load_json_data(trends_file) if trends_file else None
            efficiency_data = self.load_json_data(efficiency_file) if efficiency_file else None
            most_used_data = self.load_json_data(most_used_file) if most_used_file else None
            region_data = self.load_json_data(region_analysis_file) if region_analysis_file else None
            parcel_data = self.load_json_data(parcel_analysis_file) if parcel_analysis_file else None
            changes_data = self.load_json_data(changes_file) if changes_file else None

            if not general_data or 'data' not in general_data:
                print("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
                return False

            print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {general_data['data']}")

            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ
            if usage_data and 'data' in usage_data:
                print(f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö: {len(usage_data['data'])} –∑–∞–ø–∏—Å—ñ–≤")
            if trends_data and 'data' in trends_data:
                print(f"üìä –¢—Ä–µ–Ω–¥–∏: {len(trends_data['data'])} –∑–∞–ø–∏—Å—ñ–≤")
            if efficiency_data and 'data' in efficiency_data:
                print(f"üìä –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {len(efficiency_data['data'])} –∑–∞–ø–∏—Å—ñ–≤")

            print("üé® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó —Ñ—ñ–≥—É—Ä–∏...")
            fig = plt.figure(figsize=(24, 16))  # –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–ª—è –±—ñ–ª—å—à–µ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤

            # 1. –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
            print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            ax1 = plt.subplot(3, 4, 1)
            stats = general_data['data']

            labels = ['–¢–∏–ø–∏\n—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É', '–í—Å—å–æ–≥–æ\n–¥–æ—Å—Ç–∞–≤–æ–∫', '–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è', '–†–µ–≥—ñ–æ–Ω–∏', '–¢–∏–ø–∏\n–ø–æ—Å–∏–ª–æ–∫']
            values = [
                stats.get('total_transport_types', 0),
                stats.get('total_deliveries', 0),
                stats.get('departments_using_transport', 0),
                stats.get('regions_served', 0),
                stats.get('parcel_types_transported', 0)
            ]

            print(f"üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {dict(zip(labels, values))}")

            colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7']
            bars = ax1.bar(labels, values, color=colors, alpha=0.8)
            ax1.set_title('–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É', fontsize=11, fontweight='bold')
            ax1.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
            ax1.tick_params(axis='x', rotation=45)

            for bar, value in zip(bars, values):
                if value > 0:
                    ax1.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + max(values) * 0.01,
                             f'{value:,}', ha='center', va='bottom', fontsize=8)

            # 2. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö
            if usage_data and 'data' in usage_data and usage_data['data']:
                print("üìÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö...")
                ax2 = plt.subplot(3, 4, 2)

                # –ì—Ä—É–ø—É—î–º–æ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö
                period_usage = {}
                for key, value in usage_data['data'].items():
                    period = key.split('_')[0] if '_' in key else 'Unknown'
                    if period not in period_usage:
                        period_usage[period] = {'deliveries': 0, 'score': 0, 'count': 0}

                    period_usage[period]['deliveries'] += value.get('total_deliveries', 0)
                    period_usage[period]['score'] += value.get('period_utilization_score', 0)
                    period_usage[period]['count'] += 1

                print(f"üìä –ü–µ—Ä—ñ–æ–¥—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {len(period_usage)}")

                if period_usage:
                    periods = sorted(period_usage.keys())[:8]  # –û—Å—Ç–∞–Ω–Ω—ñ 8 –ø–µ—Ä—ñ–æ–¥—ñ–≤
                    period_deliveries = [period_usage[p]['deliveries'] for p in periods]

                    for period, deliveries in zip(periods, period_deliveries):
                        print(f"  üìÖ {period}: {deliveries} –¥–æ—Å—Ç–∞–≤–æ–∫")

                    bars = ax2.bar(range(len(periods)), period_deliveries, color='#74B9FF', alpha=0.8)
                    ax2.set_title('–î–æ—Å—Ç–∞–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö', fontsize=11, fontweight='bold')
                    ax2.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫')
                    ax2.set_xlabel('–ü–µ—Ä—ñ–æ–¥')
                    ax2.set_xticks(range(len(periods)))
                    ax2.set_xticklabels(periods, rotation=45)

                    for bar, value in zip(bars, period_deliveries):
                        if value > 0:
                            ax2.text(bar.get_x() + bar.get_width() / 2,
                                     bar.get_height() + max(period_deliveries) * 0.01,
                                     f'{value:,}', ha='center', va='bottom', fontsize=8)

            # 3. –¢—Ä–µ–Ω–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
            if trends_data and 'data' in trends_data and trends_data['data']:
                print("üìà –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ —Ç—Ä–µ–Ω–¥—ñ–≤...")
                ax3 = plt.subplot(3, 4, 3)

                # –ì—Ä—É–ø—É—î–º–æ —Ç—Ä–µ–Ω–¥–∏ –ø–æ —Ç–∏–ø–∞—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
                transport_trends = {}
                for key, value in trends_data['data'].items():
                    parts = key.split('_')
                    if len(parts) >= 2:
                        transport_type = parts[0]
                        period = parts[1] if len(parts) > 1 else 'Unknown'

                        if transport_type not in transport_trends:
                            transport_trends[transport_type] = {'periods': [], 'deliveries': []}

                        transport_trends[transport_type]['periods'].append(period)
                        transport_trends[transport_type]['deliveries'].append(value.get('total_deliveries', 0))

                print(f"üìä –¢–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –¥–ª—è —Ç—Ä–µ–Ω–¥—ñ–≤: {len(transport_trends)}")

                if transport_trends:
                    colors = plt.cm.tab10(np.linspace(0, 1, len(transport_trends)))
                    plotted = 0

                    for i, (transport_type, data) in enumerate(list(transport_trends.items())[:5]):
                        if data['periods'] and data['deliveries'] and any(data['deliveries']):
                            # –°–æ—Ä—Ç—É—î–º–æ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö
                            sorted_data = sorted(zip(data['periods'], data['deliveries']))
                            periods, deliveries = zip(*sorted_data) if sorted_data else ([], [])

                            print(f"  üìà {transport_type}: {len(periods)} –ø–µ—Ä—ñ–æ–¥—ñ–≤")
                            ax3.plot(range(len(periods)), deliveries, marker='o',
                                     label=transport_type[:12], color=colors[i], linewidth=2)
                            plotted += 1

                    if plotted > 0:
                        ax3.set_title('–¢—Ä–µ–Ω–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É', fontsize=11, fontweight='bold')
                        ax3.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫')
                        ax3.set_xlabel('–ü–µ—Ä—ñ–æ–¥')
                        ax3.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=8)
                        ax3.grid(True, alpha=0.3)

            # 4. –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
            if efficiency_data and 'data' in efficiency_data and efficiency_data['data']:
                print("‚ö° –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...")
                ax4 = plt.subplot(3, 4, 4)

                # –ë–µ—Ä–µ–º–æ —Ç–æ–ø –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
                efficiency_scores = []
                transport_names = []

                for key, value in list(efficiency_data['data'].items())[:10]:
                    parts = key.split('_')
                    transport_name = parts[1] if len(parts) > 1 else key[:15]
                    efficiency = value.get('efficiency_ratio', 0)

                    transport_names.append(transport_name)
                    efficiency_scores.append(efficiency)
                    print(f"  ‚ö° {transport_name}: –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å = {efficiency}")

                if efficiency_scores and any(efficiency_scores):
                    bars = ax4.barh(range(len(transport_names)), efficiency_scores, color='#00B894', alpha=0.8)
                    ax4.set_title('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É', fontsize=11, fontweight='bold')
                    ax4.set_xlabel('–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ')
                    ax4.set_yticks(range(len(transport_names)))
                    ax4.set_yticklabels(transport_names)

                    for bar, score in zip(bars, efficiency_scores):
                        if score > 0:
                            ax4.text(bar.get_width() + max(efficiency_scores) * 0.01,
                                     bar.get_y() + bar.get_height() / 2,
                                     f'{score:.1f}', ha='left', va='center', fontsize=8)

            # 5. –†–æ–∑–ø–æ–¥—ñ–ª —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö
            if region_data and 'data' in region_data and region_data['data']:
                print("üó∫Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö...")
                ax5 = plt.subplot(3, 4, 5)

                # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö
                region_transport = {}
                for key, value in region_data['data'].items():
                    parts = key.split('_')
                    region = parts[2] if len(parts) > 2 else 'Unknown'

                    if region not in region_transport:
                        region_transport[region] = 0
                    region_transport[region] += value.get('total_deliveries', 0)

                print(f"üåç –†–µ–≥—ñ–æ–Ω—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {len(region_transport)}")

                if region_transport:
                    # –¢–æ–ø 8 —Ä–µ–≥—ñ–æ–Ω—ñ–≤
                    top_regions = sorted(region_transport.items(), key=lambda x: x[1], reverse=True)[:8]
                    region_names = [region[0].replace('_', ' ')[:12] for region in top_regions]
                    region_deliveries = [region[1] for region in top_regions]

                    for name, deliveries in zip(region_names, region_deliveries):
                        print(f"  üåç {name}: {deliveries} –¥–æ—Å—Ç–∞–≤–æ–∫")

                    bars = ax5.barh(range(len(region_names)), region_deliveries, color='#E17055', alpha=0.8)
                    ax5.set_title('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö', fontsize=11, fontweight='bold')
                    ax5.set_xlabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫')
                    ax5.set_yticks(range(len(region_names)))
                    ax5.set_yticklabels(region_names)

                    for bar, value in zip(bars, region_deliveries):
                        if value > 0:
                            ax5.text(bar.get_width() + max(region_deliveries) * 0.01,
                                     bar.get_y() + bar.get_height() / 2,
                                     f'{value:,}', ha='left', va='center', fontsize=8)

            # 6. –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–æ —Ç–∏–ø–∞—Ö –ø–æ—Å–∏–ª–æ–∫
            if parcel_data and 'data' in parcel_data and parcel_data['data']:
                print("üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö –ø–æ—Å–∏–ª–æ–∫...")
                ax6 = plt.subplot(3, 4, 6)

                # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ç–∏–ø–∞—Ö –ø–æ—Å–∏–ª–æ–∫
                parcel_transport = {}
                for key, value in parcel_data['data'].items():
                    parts = key.split('_')
                    parcel_type = parts[2] if len(parts) > 2 else 'Unknown'

                    if parcel_type not in parcel_transport:
                        parcel_transport[parcel_type] = {'deliveries': 0, 'weight': 0, 'count': 0}

                    parcel_transport[parcel_type]['deliveries'] += value.get('total_deliveries', 0)
                    parcel_transport[parcel_type]['weight'] += value.get('avg_parcel_weight', 0)
                    parcel_transport[parcel_type]['count'] += 1

                print(f"üì¶ –¢–∏–ø—ñ–≤ –ø–æ—Å–∏–ª–æ–∫: {len(parcel_transport)}")

                if parcel_transport:
                    parcel_types = list(parcel_transport.keys())
                    parcel_deliveries = [parcel_transport[pt]['deliveries'] for pt in parcel_types]

                    if any(parcel_deliveries):
                        colors = plt.cm.Set3(np.linspace(0, 1, len(parcel_types)))
                        wedges, texts, autotexts = ax6.pie(parcel_deliveries, labels=parcel_types,
                                                           autopct='%1.1f%%', colors=colors, startangle=90)
                        ax6.set_title('–†–æ–∑–ø–æ–¥—ñ–ª —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø–æ —Ç–∏–ø–∞—Ö –ø–æ—Å–∏–ª–æ–∫', fontsize=11, fontweight='bold')

            # 7. –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–æ —Ç–∏–ø–∞—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
            if usage_data and 'data' in usage_data and usage_data['data']:
                print("‚è±Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏...")
                ax7 = plt.subplot(3, 4, 7)

                # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ç–∏–ø–∞—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
                transport_processing_time = {}
                for key, value in usage_data['data'].items():
                    parts = key.split('_')
                    transport_type = parts[2] if len(parts) > 2 else 'Unknown'

                    if transport_type not in transport_processing_time:
                        transport_processing_time[transport_type] = {'time': 0, 'count': 0}

                    transport_processing_time[transport_type]['time'] += value.get('avg_processing_time', 0)
                    transport_processing_time[transport_type]['count'] += 1

                if transport_processing_time:
                    # –û–±—á–∏—Å–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å
                    for transport_type in transport_processing_time:
                        if transport_processing_time[transport_type]['count'] > 0:
                            transport_processing_time[transport_type]['avg_time'] = (
                                    transport_processing_time[transport_type]['time'] /
                                    transport_processing_time[transport_type]['count']
                            )

                    transport_types = list(transport_processing_time.keys())[:8]
                    processing_times = [transport_processing_time[tt].get('avg_time', 0) for tt in transport_types]

                    print(f"‚è±Ô∏è –¢–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –¥–ª—è —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏: {len(transport_types)}")

                    if any(processing_times):
                        bars = ax7.bar(range(len(transport_types)), processing_times, color='#FD79A8', alpha=0.8)
                        ax7.set_title('–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–æ —Ç–∏–ø–∞—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É', fontsize=11, fontweight='bold')
                        ax7.set_ylabel('–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ (–≥–æ–¥)')
                        ax7.set_xlabel('–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É')
                        ax7.set_xticks(range(len(transport_types)))
                        ax7.set_xticklabels([tt[:8] for tt in transport_types], rotation=45)

                        for bar, time in zip(bars, processing_times):
                            if time > 0:
                                ax7.text(bar.get_x() + bar.get_width() / 2,
                                         bar.get_height() + max(processing_times) * 0.01,
                                         f'{time:.1f}', ha='center', va='bottom', fontsize=8)

            # 8. –ù–∞–π–±—ñ–ª—å—à –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ —Ç–∏–ø–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
            if most_used_data and 'data' in most_used_data and most_used_data['data']:
                print("üèÜ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –Ω–∞–π–±—ñ–ª—å—à –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω–∏—Ö...")
                ax8 = plt.subplot(3, 4, 8)

                # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –ø–µ—Ä—ñ–æ–¥ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –¥–∞–Ω–∏—Ö
                first_period = list(most_used_data['data'].keys())[0] if most_used_data['data'] else None
                if first_period and most_used_data['data'][first_period]:
                    top_transport = list(most_used_data['data'][first_period].items())[:6]

                    if top_transport:
                        transport_names = []
                        utilization_scores = []

                        for transport_key, transport_data in top_transport:
                            transport_name = transport_key.split('_')[2] if '_' in transport_key else transport_key[:10]
                            score = transport_data.get('period_utilization_score', 0)

                            transport_names.append(transport_name)
                            utilization_scores.append(score)
                            print(f"  üèÜ {transport_name}: —Ä–µ–π—Ç–∏–Ω–≥ = {score}")

                        if any(utilization_scores):
                            bars = ax8.barh(range(len(transport_names)), utilization_scores, color='#FDCB6E', alpha=0.8)
                            ax8.set_title(f'–¢–æ–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç ({first_period})', fontsize=11, fontweight='bold')
                            ax8.set_xlabel('–†–µ–π—Ç–∏–Ω–≥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')
                            ax8.set_yticks(range(len(transport_names)))
                            ax8.set_yticklabels(transport_names)

                            for bar, score in zip(bars, utilization_scores):
                                if score > 0:
                                    ax8.text(bar.get_width() + max(utilization_scores) * 0.01,
                                             bar.get_y() + bar.get_height() / 2,
                                             f'{score:.1f}', ha='left', va='center', fontsize=8)

            # 9. –î–∏–Ω–∞–º—ñ–∫–∞ –∑–º—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
            if changes_data and 'data' in changes_data and changes_data['data']:
                print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –¥–∏–Ω–∞–º—ñ–∫–∏ –∑–º—ñ–Ω...")
                ax9 = plt.subplot(3, 4, 9)

                changes = list(changes_data['data'].values())
                if changes:
                    change_labels = [change.get('current_period', 'Unknown') for change in changes]
                    delivery_changes = [change.get('deliveries_change', 0) for change in changes]

                    print(f"üìä –ü–µ—Ä—ñ–æ–¥—ñ–≤ –∑–º—ñ–Ω: {len(changes)}")

                    if any(delivery_changes):
                        colors = ['green' if x >= 0 else 'red' for x in delivery_changes]
                        bars = ax9.bar(range(len(change_labels)), delivery_changes, color=colors, alpha=0.7)
                        ax9.set_title('–ó–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞–≤–æ–∫', fontsize=11, fontweight='bold')
                        ax9.set_ylabel('–ó–º—ñ–Ω–∞ –¥–æ—Å—Ç–∞–≤–æ–∫')
                        ax9.set_xlabel('–ü–µ—Ä—ñ–æ–¥')
                        ax9.set_xticks(range(len(change_labels)))
                        ax9.set_xticklabels(change_labels, rotation=45)
                        ax9.axhline(y=0, color='black', linestyle='-', alpha=0.3)

                        for bar, change in zip(bars, delivery_changes):
                            if change != 0:
                                ax9.text(bar.get_x() + bar.get_width() / 2,
                                         bar.get_height() + (max(delivery_changes) - min(delivery_changes)) * 0.01,
                                         f'{change:+}', ha='center', va='bottom', fontsize=8)

            # 10. –†–æ–∑–ø–æ–¥—ñ–ª –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø–æ —Ç–∏–ø–∞—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
            if usage_data and 'data' in usage_data and usage_data['data']:
                print("üè¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É...")
                ax10 = plt.subplot(3, 4, 10)

                # –ì—Ä—É–ø—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø–æ —Ç–∏–ø–∞—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
                transport_departments = {}
                for key, value in usage_data['data'].items():
                    parts = key.split('_')
                    transport_type = parts[2] if len(parts) > 2 else 'Unknown'

                    if transport_type not in transport_departments:
                        transport_departments[transport_type] = 0
                    transport_departments[transport_type] += value.get('departments_served', 0)

                if transport_departments:
                    # –¢–æ–ø 8 —Ç–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
                    top_transport_dept = sorted(transport_departments.items(), key=lambda x: x[1], reverse=True)[:8]
                    transport_names = [item[0][:10] for item in top_transport_dept]
                    dept_counts = [item[1] for item in top_transport_dept]

                    print(f"üè¢ –¢–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –¥–ª—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å: {len(transport_names)}")

                    if any(dept_counts):
                        bars = ax10.bar(range(len(transport_names)), dept_counts, color='#A29BFE', alpha=0.8)
                        ax10.set_title('–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ø–æ —Ç–∏–ø–∞—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É', fontsize=11, fontweight='bold')
                        ax10.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω—å')
                        ax10.set_xlabel('–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É')
                        ax10.set_xticks(range(len(transport_names)))
                        ax10.set_xticklabels(transport_names, rotation=45)

                        for bar, count in zip(bars, dept_counts):
                            if count > 0:
                                ax10.text(bar.get_x() + bar.get_width() / 2,
                                          bar.get_height() + max(dept_counts) * 0.01,
                                          f'{count}', ha='center', va='bottom', fontsize=8)

            # 11. –°–µ—Ä–µ–¥–Ω—è –≤–∞–≥–∞ –ø–æ—Å–∏–ª–æ–∫ –ø–æ —Ç–∏–ø–∞—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
            if parcel_data and 'data' in parcel_data and parcel_data['data']:
                print("‚öñÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –≤–∞–≥–∏ –ø–æ—Å–∏–ª–æ–∫...")
                ax11 = plt.subplot(3, 4, 11)

                # –ì—Ä—É–ø—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—é –≤–∞–≥—É –ø–æ —Ç–∏–ø–∞—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
                transport_weight = {}
                for key, value in parcel_data['data'].items():
                    parts = key.split('_')
                    transport_type = parts[1] if len(parts) > 1 else 'Unknown'

                    if transport_type not in transport_weight:
                        transport_weight[transport_type] = {'weight': 0, 'count': 0}

                    transport_weight[transport_type]['weight'] += value.get('avg_parcel_weight', 0)
                    transport_weight[transport_type]['count'] += 1

                if transport_weight:
                    # –û–±—á–∏—Å–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—é –≤–∞–≥—É
                    for transport_type in transport_weight:
                        if transport_weight[transport_type]['count'] > 0:
                            transport_weight[transport_type]['avg_weight'] = (
                                    transport_weight[transport_type]['weight'] /
                                    transport_weight[transport_type]['count']
                            )

                    transport_types = list(transport_weight.keys())[:8]
                    avg_weights = [transport_weight[tt].get('avg_weight', 0) for tt in transport_types]

                    print(f"‚öñÔ∏è –¢–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –¥–ª—è –≤–∞–≥–∏: {len(transport_types)}")

                    if any(avg_weights):
                        bars = ax11.bar(range(len(transport_types)), avg_weights, color='#00CEC9', alpha=0.8)
                        ax11.set_title('–°–µ—Ä–µ–¥–Ω—è –≤–∞–≥–∞ –ø–æ—Å–∏–ª–æ–∫ –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É', fontsize=11, fontweight='bold')
                        ax11.set_ylabel('–°–µ—Ä–µ–¥–Ω—è –≤–∞–≥–∞ (–∫–≥)')
                        ax11.set_xlabel('–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É')
                        ax11.set_xticks(range(len(transport_types)))
                        ax11.set_xticklabels([tt[:8] for tt in transport_types], rotation=45)

                        for bar, weight in zip(bars, avg_weights):
                            if weight > 0:
                                ax11.text(bar.get_x() + bar.get_width() / 2,
                                          bar.get_height() + max(avg_weights) * 0.01,
                                          f'{weight:.1f}', ha='center', va='bottom', fontsize=8)

            # 12. –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            if usage_data and 'data' in usage_data and usage_data['data']:
                print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤...")
                ax12 = plt.subplot(3, 4, 12)

                utilization_scores = []
                for value in usage_data['data'].values():
                    score = value.get('period_utilization_score', 0)
                    if score > 0:
                        utilization_scores.append(score)

                print(f"üìä –†–µ–π—Ç–∏–Ω–≥—ñ–≤ –¥–ª—è –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏: {len(utilization_scores)}")

                if utilization_scores and len(utilization_scores) > 1:
                    bins_count = min(15, len(utilization_scores))
                    ax12.hist(utilization_scores, bins=bins_count,
                              color='#6C5CE7', alpha=0.7, edgecolor='black')
                    ax12.set_title('–†–æ–∑–ø–æ–¥—ñ–ª —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è', fontsize=11, fontweight='bold')
                    ax12.set_xlabel('–†–µ–π—Ç–∏–Ω–≥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')
                    ax12.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤')

                    mean_score = np.mean(utilization_scores)
                    ax12.axvline(mean_score, color='red', linestyle='--',
                                 label=f'–°–µ—Ä–µ–¥–Ω—î: {mean_score:.1f}')
                    ax12.legend()

                    print(f"üìä –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥: {mean_score:.1f}")

            print("üé® –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞–∫–µ—Ç—É...")
            plt.tight_layout(pad=2.0)

            print("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞...")
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            chart_path = os.path.join(self.config.CHARTS_PATH, f'transport_utilization_extended_{timestamp}.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()

            print(f"‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(chart_path)}")
            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É: {e}")
            print(f"üîç –î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {traceback.format_exc()}")
            plt.close('all')
            return False

    def create_all_charts(self):
        """–°—Ç–≤–æ—Ä—é—î –≤—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏"""
        print("üé® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤...")

        charts_created = []

        # –ö—É—Ä'—î—Ä–∏
        if self.create_courier_performance_charts():
            charts_created.append("–ö—É—Ä'—î—Ä–∏")

        # –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è
        if self.create_department_workload_charts():
            charts_created.append("–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è")

        # –ß–∞—Å –æ–±—Ä–æ–±–∫–∏
        if self.create_processing_time_charts():
            charts_created.append("–ß–∞—Å –æ–±—Ä–æ–±–∫–∏")

        # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        if self.create_transport_utilization_charts():
            charts_created.append("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç")

        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –≥—Ä–∞—Ñ—ñ–∫–∏ –¥–ª—è: {', '.join(charts_created)}")
        return charts_created