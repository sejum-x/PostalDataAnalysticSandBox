"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–≤—ñ—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É Data Warehouse
–ü—Ä–∞—Ü—é—î –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é –æ–∫—Ä–µ–º–∏—Ö JSON —Ñ–∞–π–ª—ñ–≤
"""

import json
import os
import sys
from datetime import datetime
import glob
import numpy as np

sys.path.append('..')
from config.database_config import DatabaseConfig

class DWReportGenerator:
    def __init__(self):
        self.config = DatabaseConfig()

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∑–≤—ñ—Ç—ñ–≤ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        os.makedirs(self.config.REPORTS_PATH, exist_ok=True)

    def get_latest_files_by_pattern(self, pattern):
        """–û—Ç—Ä–∏–º—É—î –Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Ñ–∞–π–ª–∏ –∑–∞ –ø–∞—Ç–µ—Ä–Ω–æ–º"""
        file_pattern = os.path.join(self.config.PROCESSED_DATA_PATH, pattern)
        matching_files = glob.glob(file_pattern)
        if matching_files:
            return max(matching_files, key=os.path.getctime)
        return None

    def load_json_data(self, filepath):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ JSON —Ñ–∞–π–ª—É"""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {filepath}: {e}")
            return None

    def get_all_analysis_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—ñ–≤"""
        data = {
            'courier': {},
            'department': {},
            'processing_time': {},
            'transport': {}
        }

        # –ö—É—Ä'—î—Ä–∏
        courier_patterns = [
            'courier_general_stats_*.json',
            'courier_performance_*.json',
            'courier_top_performers_*.json',
            'courier_region_analysis_*.json',
            'courier_city_analysis_*.json'
        ]

        for pattern in courier_patterns:
            file_path = self.get_latest_files_by_pattern(pattern)
            if file_path:
                key = pattern.replace('courier_', '').replace('_*.json', '')
                data['courier'][key] = self.load_json_data(file_path)

        # –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è
        department_patterns = [
            'department_general_stats_*.json',
            'department_period_summary_*.json',
            'department_trends_*.json',
            'department_top_busy_*.json',
            'department_type_analysis_*.json',
            'department_region_analysis_*.json',
            'department_city_analysis_*.json',
            'department_period_comparison_*.json'
        ]

        for pattern in department_patterns:
            file_path = self.get_latest_files_by_pattern(pattern)
            if file_path:
                key = pattern.replace('department_', '').replace('_*.json', '')
                data['department'][key] = self.load_json_data(file_path)

        # –ß–∞—Å –æ–±—Ä–æ–±–∫–∏
        processing_patterns = [
            'processing_time_general_stats_*.json',
            'processing_time_trends_*.json',
            'processing_time_period_comparison_*.json',
            'processing_time_region_analysis_*.json',
            'processing_time_period_changes_*.json'
        ]

        for pattern in processing_patterns:
            file_path = self.get_latest_files_by_pattern(pattern)
            if file_path:
                key = pattern.replace('processing_time_', '').replace('_*.json', '')
                data['processing_time'][key] = self.load_json_data(file_path)

        # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        transport_patterns = [
            'transport_general_stats_*.json',
            'transport_period_usage_*.json',
            'transport_trends_*.json',
            'transport_efficiency_*.json',
            'transport_most_used_*.json',
            'transport_region_analysis_*.json'
        ]

        for pattern in transport_patterns:
            file_path = self.get_latest_files_by_pattern(pattern)
            if file_path:
                key = pattern.replace('transport_', '').replace('_*.json', '')
                data['transport'][key] = self.load_json_data(file_path)

        return data

    def generate_executive_summary(self):
        """–ì–µ–Ω–µ—Ä—É—î –≤–∏–∫–æ–Ω–∞–≤—á–∏–π –∑–≤—ñ—Ç"""
        print("üìã –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–≤—á–æ–≥–æ –∑–≤—ñ—Ç—É...")

        data = self.get_all_analysis_data()

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_path = os.path.join(self.config.REPORTS_PATH, f'executive_summary_{timestamp}.txt')

        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("="*80 + "\n")
            f.write("–í–ò–ö–û–ù–ê–í–ß–ò–ô –ó–í–Ü–¢ - –ê–ù–ê–õ–Ü–ó DATA WAREHOUSE –ü–û–®–¢–û–í–û–á –°–õ–£–ñ–ë–ò\n")
            f.write("="*80 + "\n")
            f.write(f"–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n")

            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä'—î—Ä—ñ–≤
            if data['courier'].get('general_stats') and 'data' in data['courier']['general_stats']:
                courier_stats = data['courier']['general_stats']['data']
                f.write("üöö –ö–£–†'–Ñ–†–°–¨–ö–ê –°–õ–£–ñ–ë–ê:\n")
                f.write(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –∫—É—Ä'—î—Ä—ñ–≤: {courier_stats.get('total_couriers', 'N/A'):,}\n")
                f.write(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: {courier_stats.get('total_deliveries', 'N/A'):,}\n")
                f.write(f"   ‚Ä¢ –û–±—Å–ª—É–≥–æ–≤—É—î—Ç—å—Å—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤: {courier_stats.get('total_regions', 'N/A')}\n")
                f.write(f"   ‚Ä¢ –û–±—Å–ª—É–≥–æ–≤—É—î—Ç—å—Å—è –º—ñ—Å—Ç: {courier_stats.get('total_cities', 'N/A')}\n")

                if courier_stats.get('avg_delivery_time'):
                    f.write(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {courier_stats['avg_delivery_time']:.1f} —Ö–≤\n")
                f.write("\n")

            # –¢–æ–ø –∫—É—Ä'—î—Ä–∏
            if data['courier'].get('top_performers') and 'data' in data['courier']['top_performers']:
                top_couriers = data['courier']['top_performers']['data']
                f.write("üèÜ –¢–û–ü-3 –ö–£–†'–Ñ–†–ò –ó–ê –ï–§–ï–ö–¢–ò–í–ù–Ü–°–¢–Æ:\n")

                sorted_couriers = sorted(top_couriers.items(),
                                       key=lambda x: x[1].get('efficiency_score', 0),
                                       reverse=True)[:3]

                for i, (courier_id, stats) in enumerate(sorted_couriers, 1):
                    f.write(f"   {i}. –ö—É—Ä'—î—Ä ID {stats.get('courier_id', courier_id)}: ")
                    f.write(f"—Ä–µ–π—Ç–∏–Ω–≥ {stats.get('efficiency_score', 0):.1f}, ")
                    f.write(f"–¥–æ—Å—Ç–∞–≤–æ–∫ {stats.get('total_deliveries', 0)}\n")
                f.write("\n")

            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å
            if data['department'].get('general_stats') and 'data' in data['department']['general_stats']:
                dept_stats = data['department']['general_stats']['data']
                f.write("üè¢ –í–Ü–î–î–Ü–õ–ï–ù–ù–Ø:\n")
                f.write(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å: {dept_stats.get('total_departments', 'N/A'):,}\n")
                f.write(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: {dept_stats.get('total_deliveries', 'N/A'):,}\n")
                f.write(f"   ‚Ä¢ –†–µ–≥—ñ–æ–Ω—ñ–≤: {dept_stats.get('total_regions', 'N/A')}\n")
                f.write(f"   ‚Ä¢ –ú—ñ—Å—Ç: {dept_stats.get('total_cities', 'N/A')}\n")
                f.write(f"   ‚Ä¢ –ü–µ—Ä—ñ–æ–¥—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É: {dept_stats.get('total_periods', 'N/A')}\n")

                if dept_stats.get('avg_processing_time'):
                    f.write(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–±—Ä–æ–±–∫–∏: {dept_stats['avg_processing_time']:.1f} –≥–æ–¥\n")
                f.write("\n")

            # –ß–∞—Å –æ–±—Ä–æ–±–∫–∏
            if data['processing_time'].get('general_stats') and 'data' in data['processing_time']['general_stats']:
                proc_stats = data['processing_time']['general_stats']['data']
                f.write("‚è±Ô∏è –ß–ê–° –û–ë–†–û–ë–ö–ò:\n")
                f.write(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {proc_stats.get('avg_processing_time', 'N/A'):.1f} –≥–æ–¥\n")
                f.write(f"   ‚Ä¢ –ú–µ–¥—ñ–∞–Ω–Ω–∏–π —á–∞—Å: {proc_stats.get('median_processing_time', 'N/A'):.1f} –≥–æ–¥\n")
                f.write(f"   ‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å: {proc_stats.get('min_processing_time', 'N/A'):.1f} –≥–æ–¥\n")
                f.write(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å: {proc_stats.get('max_processing_time', 'N/A'):.1f} –≥–æ–¥\n")
                f.write(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {proc_stats.get('total_records', 'N/A'):,}\n\n")

            # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            if data['transport'].get('general_stats') and 'data' in data['transport']['general_stats']:
                transport_stats = data['transport']['general_stats']['data']
                f.write("üöõ –¢–†–ê–ù–°–ü–û–†–¢:\n")
                f.write(f"   ‚Ä¢ –¢–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É: {transport_stats.get('total_transport_types', 'N/A')}\n")
                f.write(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: {transport_stats.get('total_deliveries', 'N/A'):,}\n")
                f.write(f"   ‚Ä¢ –í—ñ–¥–¥—ñ–ª–µ–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å: {transport_stats.get('departments_using_transport', 'N/A')}\n")
                f.write(f"   ‚Ä¢ –†–µ–≥—ñ–æ–Ω—ñ–≤ –æ–±—Å–ª—É–≥–æ–≤—É—î—Ç—å—Å—è: {transport_stats.get('regions_served', 'N/A')}\n\n")

            # –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            if data['transport'].get('most_used') and 'data' in data['transport']['most_used']:
                most_used = data['transport']['most_used']['data']
                f.write("üöö –ù–ê–ô–ü–û–ü–£–õ–Ø–†–ù–Ü–®–ò–ô –¢–†–ê–ù–°–ü–û–†–¢:\n")

                # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –ø–µ—Ä—ñ–æ–¥
                first_period = list(most_used.keys())[0] if most_used else None
                if first_period and most_used[first_period]:
                    transport_usage = {}
                    for key, value in most_used[first_period].items():
                        transport_type = value.get('transport_type_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
                        if transport_type not in transport_usage:
                            transport_usage[transport_type] = 0
                        transport_usage[transport_type] += value.get('total_deliveries', 0)

                    sorted_transport = sorted(transport_usage.items(), key=lambda x: x[1], reverse=True)[:3]
                    for i, (transport, deliveries) in enumerate(sorted_transport, 1):
                        f.write(f"   {i}. {transport}: {deliveries:,} –¥–æ—Å—Ç–∞–≤–æ–∫\n")
                f.write("\n")

            # –ê–Ω–∞–ª—ñ–∑ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ–π
            f.write("üìà –ö–õ–Æ–ß–û–í–Ü –¢–ï–ù–î–ï–ù–¶–Ü–á:\n")

            # –¢–µ–Ω–¥–µ–Ω—Ü—ñ—ó –≤—ñ–¥–¥—ñ–ª–µ–Ω—å
            if data['department'].get('trends') and 'data' in data['department']['trends']:
                trends = data['department']['trends']['data']
                if trends:
                    f.write("   ‚Ä¢ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:\n")
                    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç—Ä–µ–Ω–¥–∏ (–ø—Ä–∏–∫–ª–∞–¥)
                    total_deliveries = sum(dept.get('total_deliveries', 0) for dept in trends.values())
                    avg_deliveries = total_deliveries / len(trends) if trends else 0
                    f.write(f"     - –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {avg_deliveries:.0f}\n")

            # –ü—Ä–æ–±–ª–µ–º–Ω—ñ –∑–æ–Ω–∏
            f.write("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–Ü –ó–û–ù–ò:\n")

            # –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏
            if data['processing_time'].get('general_stats') and 'data' in data['processing_time']['general_stats']:
                proc_stats = data['processing_time']['general_stats']['data']
                avg_time = proc_stats.get('avg_processing_time', 0)
                max_time = proc_stats.get('max_processing_time', 0)

                if max_time > avg_time * 3:  # –Ø–∫—â–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å —É 3 —Ä–∞–∑–∏ –±—ñ–ª—å—à–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ
                    f.write(f"   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω–æ –¥–æ–≤–≥–∏–π —á–∞—Å –æ–±—Ä–æ–±–∫–∏: –¥–æ {max_time:.1f} –≥–æ–¥\n")

                if avg_time > 24:  # –Ø–∫—â–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –±—ñ–ª—å—à–µ –¥–æ–±–∏
                    f.write(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–≤–∏—â—É—î –Ω–æ—Ä–º—É: {avg_time:.1f} –≥–æ–¥\n")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            f.write("\nüí° –ö–õ–Æ–ß–û–í–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:\n")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É
            recommendations = []

            # –ê–Ω–∞–ª—ñ–∑ –∫—É—Ä'—î—Ä—ñ–≤
            if data['courier'].get('top_performers') and 'data' in data['courier']['top_performers']:
                top_couriers = data['courier']['top_performers']['data']
                if len(top_couriers) > 0:
                    efficiency_scores = [courier.get('efficiency_score', 0) for courier in top_couriers.values()]
                    if efficiency_scores:
                        min_efficiency = min(efficiency_scores)
                        max_efficiency = max(efficiency_scores)
                        if max_efficiency - min_efficiency > 50:  # –í–µ–ª–∏–∫–∞ —Ä—ñ–∑–Ω–∏—Ü—è –≤ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                            recommendations.append("–ü—Ä–æ–≤–µ—Å—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è –∫—É—Ä'—î—Ä—ñ–≤ –∑ –Ω–∏–∑—å–∫–æ—é –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é")

            # –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏
            if data['processing_time'].get('general_stats') and 'data' in data['processing_time']['general_stats']:
                proc_stats = data['processing_time']['general_stats']['data']
                if proc_stats.get('avg_processing_time', 0) > 12:
                    recommendations.append("–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏ –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å–∏–ª–æ–∫")
                if proc_stats.get('max_processing_time', 0) > 72:
                    recommendations.append("–î–æ—Å–ª—ñ–¥–∏—Ç–∏ –ø—Ä–∏—á–∏–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–æ–≤–≥–æ—ó –æ–±—Ä–æ–±–∫–∏")

            # –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            recommendations.extend([
                "–í–ø—Ä–æ–≤–∞–¥–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ",
                "–†–æ–∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É –º–æ—Ç–∏–≤–∞—Ü—ñ—ó –¥–ª—è –∫—Ä–∞—â–∏—Ö –∫—É—Ä'—î—Ä—ñ–≤",
                "–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—ñ–∂ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è–º–∏",
                "–ü–æ–∫—Ä–∞—â–∏—Ç–∏ –ª–æ–≥—ñ—Å—Ç–∏—á–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏",
                "–ê–≤—Ç–æ–º–∞—Ç–∏–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∏"
            ])

            for i, rec in enumerate(recommendations, 1):
                f.write(f"   {i}. {rec}\n")

            f.write("\n" + "="*80 + "\n")
            f.write("–ó–≤—ñ—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∏—Å—Ç–µ–º–æ—é –∞–Ω–∞–ª—ñ–∑—É Data Warehouse\n")

        print(f"‚úÖ –í–∏–∫–æ–Ω–∞–≤—á–∏–π –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(report_path)}")
        return report_path

    def generate_detailed_report(self):
        """–ì–µ–Ω–µ—Ä—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É...")

        data = self.get_all_analysis_data()

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_path = os.path.join(self.config.REPORTS_PATH, f'detailed_report_{timestamp}.txt')

        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("="*100 + "\n")
            f.write("–î–ï–¢–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢ - –ê–ù–ê–õ–Ü–ó DATA WAREHOUSE –ü–û–®–¢–û–í–û–á –°–õ–£–ñ–ë–ò\n")
            f.write("="*100 + "\n")
            f.write(f"–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n")

            # –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫—É—Ä'—î—Ä—ñ–≤
            self._write_courier_detailed_section(f, data['courier'])

            # –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å
            self._write_department_detailed_section(f, data['department'])

            # –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏
            self._write_processing_detailed_section(f, data['processing_time'])

            # –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
            self._write_transport_detailed_section(f, data['transport'])

        print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(report_path)}")
        return report_path

    def _write_courier_detailed_section(self, file, courier_data):
        """–ó–∞–ø–∏—Å—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å–µ–∫—Ü—ñ—é –∞–Ω–∞–ª—ñ–∑—É –∫—É—Ä'—î—Ä—ñ–≤"""
        file.write("\nüöö –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ö–£–†'–Ñ–†–Ü–í\n")
        file.write("-" * 80 + "\n")

        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if courier_data.get('general_stats') and 'data' in courier_data['general_stats']:
            stats = courier_data['general_stats']['data']
            file.write("–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
            for key, value in stats.items():
                if isinstance(value, (int, float)):
                    if isinstance(value, float):
                        file.write(f"  ‚Ä¢ {key}: {value:.2f}\n")
                    else:
                        file.write(f"  ‚Ä¢ {key}: {value:,}\n")
                else:
                    file.write(f"  ‚Ä¢ {key}: {value}\n")
            file.write("\n")

        # –¢–æ–ø –∫—É—Ä'—î—Ä–∏
        if courier_data.get('top_performers') and 'data' in courier_data['top_performers']:
            top_couriers = courier_data['top_performers']['data']
            file.write("–¢–æ–ø-10 –∫—É—Ä'—î—Ä—ñ–≤ –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é:\n")

            sorted_couriers = sorted(top_couriers.items(),
                                   key=lambda x: x[1].get('efficiency_score', 0),
                                   reverse=True)[:10]

            for i, (courier_id, stats) in enumerate(sorted_couriers, 1):
                file.write(f"  {i:2d}. –ö—É—Ä'—î—Ä ID {stats.get('courier_id', courier_id):>6}: ")
                file.write(f"—Ä–µ–π—Ç–∏–Ω–≥ {stats.get('efficiency_score', 0):>6.1f}, ")
                file.write(f"–¥–æ—Å—Ç–∞–≤–æ–∫ {stats.get('total_deliveries', 0):>5}, ")
                file.write(f"—á–∞—Å {stats.get('avg_delivery_time', 0):>6.1f} —Ö–≤\n")
            file.write("\n")

        # –ê–Ω–∞–ª—ñ–∑ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö
        if courier_data.get('region_analysis') and 'data' in courier_data['region_analysis']:
            regions = courier_data['region_analysis']['data']
            file.write("–ê–Ω–∞–ª—ñ–∑ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö (—Ç–æ–ø-10):\n")

            sorted_regions = sorted(regions.items(),
                                  key=lambda x: x[1].get('total_deliveries', 0),
                                  reverse=True)[:10]

            for i, (region, stats) in enumerate(sorted_regions, 1):
                file.write(f"  {i:2d}. {region[:30]:<30}: ")
                file.write(f"{stats.get('total_deliveries', 0):>6} –¥–æ—Å—Ç–∞–≤–æ–∫, ")
                file.write(f"{stats.get('total_couriers', 0):>3} –∫—É—Ä'—î—Ä—ñ–≤\n")
            file.write("\n")

    def _write_department_detailed_section(self, file, dept_data):
        """–ó–∞–ø–∏—Å—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å–µ–∫—Ü—ñ—é –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥–¥—ñ–ª–µ–Ω—å"""
        file.write("\nüè¢ –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –í–Ü–î–î–Ü–õ–ï–ù–¨\n")
        file.write("-" * 80 + "\n")

        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if dept_data.get('general_stats') and 'data' in dept_data['general_stats']:
            stats = dept_data['general_stats']['data']
            file.write("–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
            for key, value in stats.items():
                if isinstance(value, (int, float)):
                    if isinstance(value, float):
                        file.write(f"  ‚Ä¢ {key}: {value:.2f}\n")
                    else:
                        file.write(f"  ‚Ä¢ {key}: {value:,}\n")
                else:
                    file.write(f"  ‚Ä¢ {key}: {value}\n")
            file.write("\n")

        # –ü—ñ–¥—Å—É–º–∫–∏ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö
        if dept_data.get('period_summary') and 'data' in dept_data['period_summary']:
            periods = dept_data['period_summary']['data']
            file.write("–ê–Ω–∞–ª—ñ–∑ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö:\n")

            for period, stats in periods.items():
                file.write(f"  ‚Ä¢ {period}: ")
                file.write(f"{stats.get('total_deliveries', 0):,} –¥–æ—Å—Ç–∞–≤–æ–∫, ")
                file.write(f"{stats.get('total_departments', 0)} –≤—ñ–¥–¥—ñ–ª–µ–Ω—å, ")
                file.write(f"—á–∞—Å {stats.get('avg_processing_time', 0):.1f} –≥–æ–¥\n")
            file.write("\n")

        # –¢–æ–ø –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è
        if dept_data.get('top_busy') and 'data' in dept_data['top_busy']:
            busy_data = dept_data['top_busy']['data']
            file.write("–ù–∞–π–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—à—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö:\n")

            for period, departments in busy_data.items():
                file.write(f"  {period}:\n")
                sorted_depts = sorted(departments.items(),
                                    key=lambda x: x[1].get('period_workload_score', 0),
                                    reverse=True)[:5]

                for i, (dept_id, stats) in enumerate(sorted_depts, 1):
                    file.write(f"    {i}. –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ID {stats.get('department_id', dept_id)}: ")
                    file.write(f"—Ä–µ–π—Ç–∏–Ω–≥ {stats.get('period_workload_score', 0):.1f}\n")
            file.write("\n")

    def _write_processing_detailed_section(self, file, proc_data):
        """–ó–∞–ø–∏—Å—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å–µ–∫—Ü—ñ—é –∞–Ω–∞–ª—ñ–∑—É —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏"""
        file.write("\n‚è±Ô∏è –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ß–ê–°–£ –û–ë–†–û–ë–ö–ò\n")
        file.write("-" * 80 + "\n")

        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if proc_data.get('general_stats') and 'data' in proc_data['general_stats']:
            stats = proc_data['general_stats']['data']
            file.write("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏:\n")
            for key, value in stats.items():
                if isinstance(value, (int, float)):
                    if 'time' in key.lower():
                        file.write(f"  ‚Ä¢ {key}: {value:.2f} –≥–æ–¥\n")
                    else:
                        file.write(f"  ‚Ä¢ {key}: {value:,}\n")
                else:
                    file.write(f"  ‚Ä¢ {key}: {value}\n")
            file.write("\n")

        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—ñ–≤
        if proc_data.get('period_comparison') and 'data' in proc_data['period_comparison']:
            periods = proc_data['period_comparison']['data']
            file.write("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö:\n")

            for period, stats in periods.items():
                file.write(f"  ‚Ä¢ {period}: ")
                file.write(f"—Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å {stats.get('avg_processing_time', 0):.1f} –≥–æ–¥, ")
                file.write(f"{stats.get('total_deliveries', 0):,} –¥–æ—Å—Ç–∞–≤–æ–∫\n")
            file.write("\n")

        # –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω
        if proc_data.get('period_changes') and 'data' in proc_data['period_changes']:
            changes = proc_data['period_changes']['data']
            file.write("–ó–º—ñ–Ω–∏ –º—ñ–∂ –ø–µ—Ä—ñ–æ–¥–∞–º–∏:\n")

            for change_key, change_data in changes.items():
                if isinstance(change_data, dict):
                    file.write(f"  ‚Ä¢ {change_key}:\n")
                    for metric, value in change_data.items():
                        if isinstance(value, (int, float)):
                            file.write(f"    - {metric}: {value:.2f}\n")
            file.write("\n")

    def _write_transport_detailed_section(self, file, transport_data):
        """–ó–∞–ø–∏—Å—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å–µ–∫—Ü—ñ—é –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É"""
        file.write("\nüöõ –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó –¢–†–ê–ù–°–ü–û–†–¢–£\n")
        file.write("-" * 80 + "\n")

        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if transport_data.get('general_stats') and 'data' in transport_data['general_stats']:
            stats = transport_data['general_stats']['data']
            file.write("–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:\n")
            for key, value in stats.items():
                if isinstance(value, (int, float)):
                    file.write(f"  ‚Ä¢ {key}: {value:,}\n")
                else:
                    file.write(f"  ‚Ä¢ {key}: {value}\n")
            file.write("\n")

        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö
        if transport_data.get('period_usage') and 'data' in transport_data['period_usage']:
            usage_data = transport_data['period_usage']['data']
            file.write("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:\n")

            # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ç–∏–ø–∞—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
            transport_usage = {}
            for key, value in usage_data.items():
                transport_type = value.get('transport_type_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
                if transport_type not in transport_usage:
                    transport_usage[transport_type] = 0
                transport_usage[transport_type] += value.get('total_deliveries', 0)

            sorted_transport = sorted(transport_usage.items(), key=lambda x: x[1], reverse=True)[:10]
            for i, (transport, deliveries) in enumerate(sorted_transport, 1):
                file.write(f"  {i:2d}. {transport[:40]:<40}: {deliveries:>8,} –¥–æ—Å—Ç–∞–≤–æ–∫\n")
            file.write("\n")

        # –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
        if transport_data.get('efficiency') and 'data' in transport_data['efficiency']:
            efficiency_data = transport_data['efficiency']['data']
            file.write("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:\n")

            # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ç–∏–ø–∞—Ö —Ç–∞ —Ä–∞—Ö—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—é –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
            transport_efficiency = {}
            for key, value in efficiency_data.items():
                transport_type = value.get('transport_type_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
                if transport_type not in transport_efficiency:
                    transport_efficiency[transport_type] = []
                transport_efficiency[transport_type].append(value.get('efficiency_ratio', 0))

            avg_efficiency = {transport: np.mean(ratios) for transport, ratios in transport_efficiency.items()}
            sorted_efficiency = sorted(avg_efficiency.items(), key=lambda x: x[1], reverse=True)[:10]

            for i, (transport, efficiency) in enumerate(sorted_efficiency, 1):
                file.write(f"  {i:2d}. {transport[:40]:<40}: {efficiency:>6.2f} –∫–æ–µ—Ñ.\n")
            file.write("\n")

    def generate_performance_report(self):
        """–ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        print("üéØ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...")

        data = self.get_all_analysis_data()

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_path = os.path.join(self.config.REPORTS_PATH, f'performance_report_{timestamp}.txt')

        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("="*80 + "\n")
            f.write("–ó–í–Ü–¢ –ü–û –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü –ü–û–®–¢–û–í–û–á –°–õ–£–ñ–ë–ò\n")
            f.write("="*80 + "\n")
            f.write(f"–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n")

            # KPI –∫—É—Ä'—î—Ä—ñ–≤
            f.write("üöö KPI –ö–£–†'–Ñ–†–Ü–í:\n")
            if data['courier'].get('general_stats') and 'data' in data['courier']['general_stats']:
                stats = data['courier']['general_stats']['data']
                total_couriers = stats.get('total_couriers', 0)
                total_deliveries = stats.get('total_deliveries', 0)

                if total_couriers > 0:
                    avg_deliveries_per_courier = total_deliveries / total_couriers
                    f.write(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ –∫—É—Ä'—î—Ä–∞: {avg_deliveries_per_courier:.1f}\n")

                if stats.get('avg_delivery_time'):
                    f.write(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {stats['avg_delivery_time']:.1f} —Ö–≤\n")
            f.write("\n")

            # KPI –≤—ñ–¥–¥—ñ–ª–µ–Ω—å
            f.write("üè¢ KPI –í–Ü–î–î–Ü–õ–ï–ù–¨:\n")
            if data['department'].get('general_stats') and 'data' in data['department']['general_stats']:
                stats = data['department']['general_stats']['data']
                total_departments = stats.get('total_departments', 0)
                total_deliveries = stats.get('total_deliveries', 0)

                if total_departments > 0:
                    avg_deliveries_per_dept = total_deliveries / total_departments
                    f.write(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {avg_deliveries_per_dept:.1f}\n")

                if stats.get('avg_processing_time'):
                    f.write(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–±—Ä–æ–±–∫–∏: {stats['avg_processing_time']:.1f} –≥–æ–¥\n")
            f.write("\n")

            # –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
            f.write("üöõ –ï–§–ï–ö–¢–ò–í–ù–Ü–°–¢–¨ –¢–†–ê–ù–°–ü–û–†–¢–£:\n")
            if data['transport'].get('general_stats') and 'data' in data['transport']['general_stats']:
                stats = data['transport']['general_stats']['data']
                f.write(f"   ‚Ä¢ –¢–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è: {stats.get('total_transport_types', 0)}\n")
                f.write(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º: {stats.get('total_deliveries', 0):,}\n")
            f.write("\n")

        print(f"‚úÖ –ó–≤—ñ—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(report_path)}")
        return report_path

    def generate_all_reports(self):
        """–ì–µ–Ω–µ—Ä—É—î –≤—Å—ñ –∑–≤—ñ—Ç–∏"""
        print("üìã –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –∑–≤—ñ—Ç—ñ–≤...")

        reports = []

        try:
            exec_report = self.generate_executive_summary()
            reports.append(exec_report)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ–Ω–∞–≤—á–æ–≥–æ –∑–≤—ñ—Ç—É: {e}")

        try:
            detailed_report = self.generate_detailed_report()
            reports.append(detailed_report)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É: {e}")

        try:
            performance_report = self.generate_performance_report()
            reports.append(performance_report)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")

        print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(reports)} –∑–≤—ñ—Ç—ñ–≤")
        return reports

    def generate_comparison_report(self):
        """–ì–µ–Ω–µ—Ä—É—î –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–π –∑–≤—ñ—Ç –º—ñ–∂ –ø–µ—Ä—ñ–æ–¥–∞–º–∏"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É...")

        data = self.get_all_analysis_data()

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_path = os.path.join(self.config.REPORTS_PATH, f'comparison_report_{timestamp}.txt')

        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("="*80 + "\n")
            f.write("–ü–û–†–Ü–í–ù–Ø–õ–¨–ù–ò–ô –ó–í–Ü–¢ –ü–û –ü–ï–†–Ü–û–î–ê–•\n")
            f.write("="*80 + "\n")
            f.write(f"–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n")

            # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö
            if data['department'].get('period_comparison') and 'data' in data['department']['period_comparison']:
                periods = data['department']['period_comparison']['data']
                f.write("üìà –î–ò–ù–ê–ú–Ü–ö–ê –í–Ü–î–î–Ü–õ–ï–ù–¨:\n")

                for period, stats in periods.items():
                    f.write(f"   ‚Ä¢ {period}:\n")
                    f.write(f"     - –î–æ—Å—Ç–∞–≤–æ–∫: {stats.get('total_deliveries', 0):,}\n")
                    f.write(f"     - –í—ñ–¥–¥—ñ–ª–µ–Ω—å: {stats.get('active_departments', 0)}\n")
                    f.write(f"     - –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {stats.get('avg_processing_time', 0):.1f} –≥–æ–¥\n")
                f.write("\n")

            # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏
            if data['processing_time'].get('period_comparison') and 'data' in data['processing_time']['period_comparison']:
                periods = data['processing_time']['period_comparison']['data']
                f.write("‚è±Ô∏è –î–ò–ù–ê–ú–Ü–ö–ê –ß–ê–°–£ –û–ë–†–û–ë–ö–ò:\n")

                for period, stats in periods.items():
                    f.write(f"   ‚Ä¢ {period}: {stats.get('avg_processing_time', 0):.1f} –≥–æ–¥ ")
                    f.write(f"({stats.get('total_deliveries', 0):,} –¥–æ—Å—Ç–∞–≤–æ–∫)\n")
                f.write("\n")

        print(f"‚úÖ –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(report_path)}")
        return report_path