"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–≤—ñ—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É Data Warehouse
–ü—Ä–∞—Ü—é—î –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é –¥–∞–Ω–∏—Ö
"""

import json
import os
import sys
from datetime import datetime
import glob

sys.path.append('..')
from config.database_config import DatabaseConfig

class DWReportGenerator:
    def __init__(self):
        self.config = DatabaseConfig()

    def get_latest_analysis_files(self):
        """–û—Ç—Ä–∏–º—É—î –Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Ñ–∞–π–ª–∏ –∞–Ω–∞–ª—ñ–∑—ñ–≤"""
        patterns = {
            'courier': 'courier_performance_analysis_*.json',
            'department': 'department_workload_analysis_*.json',
            'processing': 'processing_time_analysis_*.json',
            'transport': 'transport_utilization_analysis_*.json'
        }

        files = {}
        for key, pattern in patterns.items():
            file_pattern = os.path.join(self.config.PROCESSED_DATA_PATH, pattern)
            matching_files = glob.glob(file_pattern)
            if matching_files:
                files[key] = max(matching_files, key=os.path.getctime)
            else:
                files[key] = None

        return files

    def load_analysis_data(self, filepath):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É –∑ JSON"""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {filepath}: {e}")
            return None

    def generate_executive_summary(self):
        """–ì–µ–Ω–µ—Ä—É—î –≤–∏–∫–æ–Ω–∞–≤—á–∏–π –∑–≤—ñ—Ç"""
        print("üìã –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–≤—á–æ–≥–æ –∑–≤—ñ—Ç—É...")

        files = self.get_latest_analysis_files()

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
        data = {}
        for key, filepath in files.items():
            if filepath:
                data[key] = self.load_analysis_data(filepath)

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_path = os.path.join(self.config.REPORTS_PATH, f'executive_summary_{timestamp}.txt')

        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("="*80 + "\n")
            f.write("–í–ò–ö–û–ù–ê–í–ß–ò–ô –ó–í–Ü–¢ - –ê–ù–ê–õ–Ü–ó DATA WAREHOUSE –ü–û–®–¢–û–í–û–á –°–õ–£–ñ–ë–ò\n")
            f.write("="*80 + "\n")
            f.write(f"–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n")

            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if data.get('courier'):
                courier_stats = data['courier']['general_stats']
                f.write("üöö –ö–£–†'–Ñ–†–°–¨–ö–ê –°–õ–£–ñ–ë–ê:\n")
                f.write(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –∫—É—Ä'—î—Ä—ñ–≤: {courier_stats.get('total_couriers', 'N/A')}\n")
                f.write(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: {courier_stats.get('total_deliveries', 'N/A')}\n")
                f.write(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {courier_stats.get('avg_delivery_time', 'N/A'):.1f} —Ö–≤\n\n")

            if data.get('department'):
                dept_stats = data['department']['general_stats']
                f.write("üè¢ –í–Ü–î–î–Ü–õ–ï–ù–ù–Ø:\n")
                f.write(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å: {dept_stats.get('total_departments', 'N/A')}\n")
                f.write(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: {dept_stats.get('total_deliveries', 'N/A')}\n")
                f.write(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–±—Ä–æ–±–∫–∏: {dept_stats.get('avg_processing_time', 'N/A'):.1f} –≥–æ–¥\n\n")

            if data.get('transport'):
                transport_stats = data['transport']['general_stats']
                f.write("üöõ –¢–†–ê–ù–°–ü–û–†–¢:\n")
                f.write(f"   ‚Ä¢ –¢–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É: {transport_stats.get('total_transport_types', 'N/A')}\n")
                f.write(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: {transport_stats.get('total_deliveries', 'N/A')}\n\n")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            f.write("üí° –ö–õ–Æ–ß–û–í–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:\n")
            f.write("   1. –û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∏ –Ω–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏—Ö –∫—É—Ä'—î—Ä—ñ–≤\n")
            f.write("   2. –ü–µ—Ä–µ—Ä–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—ñ–∂ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è–º–∏\n")
            f.write("   3. –ü–æ–∫—Ä–∞—â–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É\n")
            f.write("   4. –í–ø—Ä–æ–≤–∞–¥–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å–∏–ª–æ–∫\n\n")

        print(f"‚úÖ –í–∏–∫–æ–Ω–∞–≤—á–∏–π –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(report_path)}")
        return report_path

    def generate_detailed_report(self):
        """–ì–µ–Ω–µ—Ä—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É...")

        files = self.get_latest_analysis_files()

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_path = os.path.join(self.config.REPORTS_PATH, f'detailed_report_{timestamp}.txt')

        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("="*100 + "\n")
            f.write("–î–ï–¢–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢ - –ê–ù–ê–õ–Ü–ó DATA WAREHOUSE –ü–û–®–¢–û–í–û–á –°–õ–£–ñ–ë–ò\n")
            f.write("="*100 + "\n")
            f.write(f"–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n")

            # –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ –∫–æ–∂–Ω–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
            for key, filepath in files.items():
                if filepath:
                    data = self.load_analysis_data(filepath)
                    if data:
                        self._write_detailed_section(f, key, data)

        print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(report_path)}")
        return report_path

    def _write_detailed_section(self, file, section_key, data):
        """–ó–∞–ø–∏—Å—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å–µ–∫—Ü—ñ—é –∑–≤—ñ—Ç—É"""
        section_names = {
            'courier': 'üöö –ê–ù–ê–õ–Ü–ó –ö–£–†\'–Ñ–†–Ü–í',
            'department': 'üè¢ –ê–ù–ê–õ–Ü–ó –í–Ü–î–î–Ü–õ–ï–ù–¨',
            'processing': '‚è±Ô∏è –ê–ù–ê–õ–Ü–ó –ß–ê–°–£ –û–ë–†–û–ë–ö–ò',
            'transport': 'üöõ –ê–ù–ê–õ–Ü–ó –¢–†–ê–ù–°–ü–û–†–¢–£'
        }

        file.write(f"\n{section_names.get(section_key, section_key.upper())}\n")
        file.write("-" * 80 + "\n")

        if 'general_stats' in data:
            file.write("–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
            for key, value in data['general_stats'].items():
                file.write(f"  ‚Ä¢ {key}: {value}\n")
            file.write("\n")

    def generate_all_reports(self):
        """–ì–µ–Ω–µ—Ä—É—î –≤—Å—ñ –∑–≤—ñ—Ç–∏"""
        reports = []

        try:
            exec_report = self.generate_executive_summary()
            reports.append(exec_report)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ–Ω–∞–≤—á–æ–≥–æ –∑–≤—ñ—Ç—É: {e}")

        try:
            detailed_report = self.generate_detailed_report()
            reports.append(detailed_report)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É: {e}")

        return reports