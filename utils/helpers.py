"""
–î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
"""

import pandas as pd
import numpy as np
import os
import glob
import time
from datetime import datetime
import warnings

warnings.filterwarnings('ignore')

def get_latest_csv_file(directory, pattern):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π CSV —Ñ–∞–π–ª –∑–∞ –ø–∞—Ç–µ—Ä–Ω–æ–º"""
    files = glob.glob(f"{directory}{pattern}")
    if not files:
        return None
    return max(files, key=os.path.getctime)

def create_directories():
    """–°—Ç–≤–æ—Ä—é—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"""
    directories = [
        'data/raw',
        'data/processed',
        'reports/output',
        'visualizations/output',
        'visualizations/output/interactive'
    ]

    for directory in directories:
        os.makedirs(directory, exist_ok=True)

def clean_old_files(directory, days_old=7):
    """–í–∏–¥–∞–ª—è—î —Å—Ç–∞—Ä—ñ —Ñ–∞–π–ª–∏"""
    if not os.path.exists(directory):
        return

    now = time.time()
    cutoff = now - (days_old * 86400)

    deleted_count = 0

    for filename in os.listdir(directory):
        filepath = os.path.join(directory, filename)
        if os.path.isfile(filepath):
            if os.path.getmtime(filepath) < cutoff:
                try:
                    os.remove(filepath)
                    print(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ: {filename}")
                    deleted_count += 1
                except Exception as e:
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {filename}: {e}")

    if deleted_count == 0:
        print(f"‚ÑπÔ∏è –§–∞–π–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ {directory}")
    else:
        print(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª—ñ–≤ –∑ {directory}")

def validate_csv_file(file_path):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å CSV —Ñ–∞–π–ª—É"""
    try:
        if not os.path.exists(file_path):
            return False, "–§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î"

        if os.path.getsize(file_path) == 0:
            return False, "–§–∞–π–ª –ø—É—Å—Ç–∏–π"

        df = pd.read_csv(file_path, nrows=5)

        if len(df) == 0:
            return False, "–§–∞–π–ª –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö"

        return True, f"–§–∞–π–ª –≤–∞–ª—ñ–¥–Ω–∏–π, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫"

    except Exception as e:
        return False, f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {e}"

def safe_numeric_conversion(series):
    """–ë–µ–∑–ø–µ—á–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ —á–∏—Å–ª–æ–≤–∏–π —Ç–∏–ø –¥–ª—è NumPy 2.x"""
    return pd.to_numeric(series, errors='coerce')

def calculate_percentiles(data, percentiles=[25, 50, 75, 90, 95]):
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—ñ –¥–ª—è –¥–∞–Ω–∏—Ö"""
    return {f'p{p}': float(np.percentile(data.dropna(), p)) for p in percentiles}

if __name__ == "__main__":
    create_directories()
    print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ!")