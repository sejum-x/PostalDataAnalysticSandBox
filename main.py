"""
–ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤—Å—å–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –∞–Ω–∞–ª—ñ–∑—É Data Warehouse –∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
NumPy 2.x compatible
"""

import os
import sys
from datetime import datetime
import glob
import warnings

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è NumPy 2.x
warnings.filterwarnings('ignore', category=FutureWarning)
warnings.filterwarnings('ignore', category=UserWarning)

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
sys.path.append('.')

from data_extraction.data_extractor import DataWarehouseExtractor
from analysis.courier_analysis import CourierAnalyzer
from analysis.department_analysis import DepartmentAnalyzer
from analysis.processing_time_analysis import ProcessingTimeAnalyzer
from analysis.transport_analysis import TransportAnalyzer
from visualizations.charts import DWChartGenerator
from reports.report_generator import DWReportGenerator
from config.database_config import DatabaseConfig
from utils.helpers import get_latest_csv_file, create_directories, clean_old_files

class PostDWAnalyticsSystem:
    def __init__(self):
        self.config = DatabaseConfig()
        self.extractor = DataWarehouseExtractor()
        self.courier_analyzer = CourierAnalyzer()
        self.department_analyzer = DepartmentAnalyzer()
        self.processing_analyzer = ProcessingTimeAnalyzer()
        self.transport_analyzer = TransportAnalyzer()
        self.chart_generator = DWChartGenerator()
        self.report_generator = DWReportGenerator()
        create_directories()

    def show_main_menu(self):
        """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        print("\n" + "="*70)
        print("üè¢ –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–Ü–ó–£ DATA WAREHOUSE –ü–û–®–¢–û–í–û–á –°–õ–£–ñ–ë–ò")
        print("="*70)
        print("1. üì• –í–∏–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ Data Warehouse")
        print("2. üìä –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö")
        print("3. üìã –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç–∏")
        print("4. üìà –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó")
        print("5. üîÑ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª (–≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è + –∞–Ω–∞–ª—ñ–∑ + –∑–≤—ñ—Ç–∏ + –≥—Ä–∞—Ñ—ñ–∫–∏)")
        print("6. üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Ñ–∞–π–ª–∏")
        print("7. üìÅ –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª—ñ–≤")
        print("8. üîç –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ DW")
        print("0. ‚ùå –í–∏—Ö—ñ–¥")
        print("="*70)

    def show_analysis_menu(self):
        """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∞–Ω–∞–ª—ñ–∑—É"""
        print("\n" + "-"*60)
        print("üìä –ú–ï–ù–Æ –ê–ù–ê–õ–Ü–ó–£ DATA WAREHOUSE")
        print("-"*60)
        print("1. üöö –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫—É—Ä'—î—Ä—ñ–≤ (–ó–∞–≤–¥–∞–Ω–Ω—è 1)")
        print("2. üè¢ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö (–ó–∞–≤–¥–∞–Ω–Ω—è 2)")
        print("3. ‚è±Ô∏è –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å–∏–ª–æ–∫ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö (–ó–∞–≤–¥–∞–Ω–Ω—è 3)")
        print("4. üöõ –ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö (–ó–∞–≤–¥–∞–Ω–Ω—è 4)")
        print("5. üéØ –ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—Å—ñ –∞–Ω–∞–ª—ñ–∑–∏")
        print("0. ‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        print("-"*60)

    def show_charts_menu(self):
        """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
        print("\n" + "-"*50)
        print("üìà –ú–ï–ù–Æ –°–¢–í–û–†–ï–ù–ù–Ø –ì–†–ê–§–Ü–ö–Ü–í")
        print("-"*50)
        print("1. üöö –ì—Ä–∞—Ñ—ñ–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫—É—Ä'—î—Ä—ñ–≤")
        print("2. üè¢ –ì—Ä–∞—Ñ—ñ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å")
        print("3. üöõ –ì—Ä–∞—Ñ—ñ–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É")
        print("4. üé® –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏")
        print("0. ‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        print("-"*50)

    def show_reports_menu(self):
        """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—ñ–≤"""
        print("\n" + "-"*50)
        print("üìã –ú–ï–ù–Æ –ì–ï–ù–ï–†–ê–¶–Ü–á –ó–í–Ü–¢–Ü–í")
        print("-"*50)
        print("1. üìÑ –í–∏–∫–æ–Ω–∞–≤—á–∏–π –∑–≤—ñ—Ç")
        print("2. üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç")
        print("3. üìã –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—Å—ñ –∑–≤—ñ—Ç–∏")
        print("0. ‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        print("-"*50)

    def test_dw_connection(self):
        """–¢–µ—Å—Ç—É—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Data Warehouse"""
        print("\nüîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û DATA WAREHOUSE")
        print("-" * 50)

        success, message = self.extractor.test_connection()

        if success:
            print(f"‚úÖ {message}")
        else:
            print(f"‚ùå {message}")
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
            print("‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–∞ LocalDB")
            print("‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö PostDW —ñ—Å–Ω—É—î")
            print("‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É")

        return success

    def extract_data(self):
        """–í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Data Warehouse"""
        print("\nüîÑ –ü–û–ß–ê–¢–û–ö –í–ò–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• –ó DATA WAREHOUSE")
        print("=" * 60)

        try:
            results = self.extractor.extract_all_raw_data()

            if isinstance(results, dict) and 'error' in results:
                print(f"‚ùå {results['error']}")
                return False

            successful = sum(1 for result in results.values() if result.get('success', False))
            total = len(results)

            print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –í–ò–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø: {successful}/{total} —É—Å–ø—ñ—à–Ω–æ")

            for name, result in results.items():
                if result.get('success'):
                    print(f"‚úÖ {name}: {result.get('records_count', 0)} –∑–∞–ø–∏—Å—ñ–≤")
                else:
                    print(f"‚ùå {name}: {result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")

            return successful > 0

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: {e}")
            return False

    def get_available_files(self):
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"""
        files = {}

        patterns = {
            'courier_delivery': 'courier_delivery_raw_data_*.csv',
            'delivery_periodic': 'delivery_periodic_raw_data_*.csv'  # –û–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≤–¥–∞–Ω—å 2,3,4
        }

        for key, pattern in patterns.items():
            file_path = get_latest_csv_file(self.config.RAW_DATA_PATH, pattern)
            files[key] = file_path

        return files

    def run_courier_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É –∫—É—Ä'—î—Ä—ñ–≤ (–ó–∞–≤–¥–∞–Ω–Ω—è 1)"""
        files = self.get_available_files()

        if not files['courier_delivery']:
            print("‚ùå –§–∞–π–ª courier_delivery_raw_data –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            print("üí° –°–ø–æ—á–∞—Ç–∫—É –≤–∏–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –∑ Data Warehouse (–ø—É–Ω–∫—Ç 1)")
            return False

        try:
            print("üîÑ –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫—É—Ä'—î—Ä—ñ–≤...")
            results = self.courier_analyzer.analyze_courier_performance(files['courier_delivery'])

            if 'error' in results:
                print(f"‚ùå {results['error']}")
                return False

            print("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∫—É—Ä'—î—Ä—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {results['general_stats']['total_couriers']} –∫—É—Ä'—î—Ä—ñ–≤")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∫—É—Ä'—î—Ä—ñ–≤: {e}")
            return False

    def run_department_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö (–ó–∞–≤–¥–∞–Ω–Ω—è 2)"""
        files = self.get_available_files()

        if not files['delivery_periodic']:
            print("‚ùå –§–∞–π–ª delivery_periodic_raw_data –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            print("üí° –°–ø–æ—á–∞—Ç–∫—É –≤–∏–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –∑ Data Warehouse (–ø—É–Ω–∫—Ç 1)")
            return False

        try:
            print("üîÑ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö...")
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–ª–∏–∫–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –∑ –ø–µ—Ä—ñ–æ–¥–∞–º–∏
            results = self.department_analyzer.analyze_department_workload_by_periods(files['delivery_periodic'])

            if 'error' in results:
                print(f"‚ùå {results['error']}")
                return False

            print("‚úÖ –ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {results['general_stats']['total_departments']} –≤—ñ–¥–¥—ñ–ª–µ–Ω—å")
            print(f"üìÖ –ó–∞ {results['general_stats']['total_periods']} –ø–µ—Ä—ñ–æ–¥—ñ–≤")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å: {e}")
            return False

    def run_processing_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö (–ó–∞–≤–¥–∞–Ω–Ω—è 3)"""
        files = self.get_available_files()

        if not files['delivery_periodic']:
            print("‚ùå –§–∞–π–ª delivery_periodic_raw_data –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            print("üí° –°–ø–æ—á–∞—Ç–∫—É –≤–∏–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –∑ Data Warehouse (–ø—É–Ω–∫—Ç 1)")
            return False

        try:
            print("üîÑ –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å–∏–ª–æ–∫ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö...")
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–ª–∏–∫–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –∑ –ø–µ—Ä—ñ–æ–¥–∞–º–∏
            results = self.processing_analyzer.analyze_processing_times_by_periods(files['delivery_periodic'])

            if 'error' in results:
                print(f"‚ùå {results['error']}")
                return False

            print("‚úÖ –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {results['general_stats']['total_parcel_types']} —Ç–∏–ø—ñ–≤ –ø–æ—Å–∏–ª–æ–∫")
            print(f"üìÖ –ó–∞ {results['general_stats']['total_periods']} –ø–µ—Ä—ñ–æ–¥—ñ–≤")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏: {e}")
            return False

    def run_transport_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö (–ó–∞–≤–¥–∞–Ω–Ω—è 4)"""
        files = self.get_available_files()

        if not files['delivery_periodic']:
            print("‚ùå –§–∞–π–ª delivery_periodic_raw_data –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            print("üí° –°–ø–æ—á–∞—Ç–∫—É –≤–∏–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –∑ Data Warehouse (–ø—É–Ω–∫—Ç 1)")
            return False

        try:
            print("üîÑ –ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö...")
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–ª–∏–∫–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –∑ –ø–µ—Ä—ñ–æ–¥–∞–º–∏
            results = self.transport_analyzer.analyze_transport_utilization_by_periods(files['delivery_periodic'])

            if 'error' in results:
                print(f"‚ùå {results['error']}")
                return False

            print("‚úÖ –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {results['general_stats']['total_transport_types']} —Ç–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É")
            print(f"üìÖ –ó–∞ {results['general_stats']['total_periods']} –ø–µ—Ä—ñ–æ–¥—ñ–≤")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É: {e}")
            return False

    def run_all_analysis(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤"""
        print("\nüöÄ –ó–ê–ü–£–°–ö –í–°–Ü–• –ê–ù–ê–õ–Ü–ó–Ü–í DATA WAREHOUSE")
        print("=" * 50)

        analyses = [
            ("üöö –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫—É—Ä'—î—Ä—ñ–≤", self.run_courier_analysis),
            ("üè¢ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å", self.run_department_analysis),
            ("‚è±Ô∏è –ß–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å–∏–ª–æ–∫", self.run_processing_analysis),
            ("üöõ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É", self.run_transport_analysis)
        ]

        results = {}

        for name, analysis_func in analyses:
            print(f"\nüîÑ {name}...")
            try:
                results[name] = analysis_func()
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {name}: {e}")
                results[name] = False

        successful = sum(results.values())
        total = len(results)

        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –ê–ù–ê–õ–Ü–ó–Ü–í: {successful}/{total} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print("=" * 50)

        for analysis_name, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            print(f"{status} {analysis_name}")

        return successful > 0

    def create_charts(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
        print("\nüé® –°–¢–í–û–†–ï–ù–ù–Ø –ì–†–ê–§–Ü–ö–Ü–í...")

        try:
            self.chart_generator.create_all_charts()
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤: {e}")
            return False

    def generate_reports(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—ñ–≤"""
        print("\nüìã –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ó–í–Ü–¢–Ü–í...")

        try:
            reports = self.report_generator.generate_all_reports()
            print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(reports)} –∑–≤—ñ—Ç—ñ–≤")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—ñ–≤: {e}")
            return False

    def show_file_status(self):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª—ñ–≤"""
        print("\nüìÅ –°–¢–ê–¢–£–° –§–ê–ô–õ–Ü–í DATA WAREHOUSE")
        print("-" * 50)

        files = self.get_available_files()

        print("üì• –í–ò–•–Ü–î–ù–Ü –î–ê–ù–Ü:")
        for file_type, file_path in files.items():
            if file_path and os.path.exists(file_path):
                file_size = os.path.getsize(file_path) / 1024
                mod_time = datetime.fromtimestamp(os.path.getmtime(file_path))
                print(f"  ‚úÖ {file_type}: {os.path.basename(file_path)}")
                print(f"     üìä –†–æ–∑–º—ñ—Ä: {file_size:.1f} KB, üïí {mod_time.strftime('%d.%m.%Y %H:%M')}")
            else:
                print(f"  ‚ùå {file_type}: —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è—Ö
        directories = [
            ("üìä –û–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ", self.config.PROCESSED_DATA_PATH, "*.json"),
            ("üìà –ì—Ä–∞—Ñ—ñ–∫–∏", self.config.CHARTS_PATH, "*.png"),
            ("üìã –ó–≤—ñ—Ç–∏", self.config.REPORTS_PATH, "*.txt")
        ]

        print(f"\nüìÇ –ó–ì–ï–ù–ï–†–û–í–ê–ù–Ü –§–ê–ô–õ–ò:")
        for name, path, pattern in directories:
            files_count = len(glob.glob(os.path.join(path, pattern)))
            print(f"  {name}: {files_count} —Ñ–∞–π–ª—ñ–≤")

    def clean_old_files_menu(self):
        """–ú–µ–Ω—é –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        print("\nüßπ –û–ß–ò–©–ï–ù–ù–Ø –°–¢–ê–†–ò–• –§–ê–ô–õ–Ü–í")
        print("-" * 30)
        print("–°–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ñ–∞–π–ª–∏?")
        print("1. 1 –¥–µ–Ω—å")
        print("2. 3 –¥–Ω—ñ")
        print("3. 7 –¥–Ω—ñ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)")
        print("4. 30 –¥–Ω—ñ–≤")
        print("0. –°–∫–∞—Å—É–≤–∞—Ç–∏")

        choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

        days_map = {'1': 1, '2': 3, '3': 7, '4': 30}

        if choice in days_map:
            days = days_map[choice]
            try:
                directories = [
                    self.config.RAW_DATA_PATH,
                    self.config.PROCESSED_DATA_PATH,
                    self.config.CHARTS_PATH,
                    self.config.REPORTS_PATH
                ]

                for directory in directories:
                    clean_old_files(directory, days)

                print(f"‚úÖ –§–∞–π–ª–∏ —Å—Ç–∞—Ä—à—ñ {days} –¥–Ω—ñ–≤ –≤–∏–¥–∞–ª–µ–Ω–æ!")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ: {e}")
        elif choice == '0':
            return
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")

    def full_cycle(self):
        """–ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –æ–±—Ä–æ–±–∫–∏"""
        print("\nüöÄ –ó–ê–ü–£–°–ö –ü–û–í–ù–û–ì–û –¶–ò–ö–õ–£ DATA WAREHOUSE –ê–ù–ê–õ–Ü–ó–£")
        print("=" * 60)

        steps = [
            ("üì• –í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ DW", self.extract_data),
            ("üìä –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö", self.run_all_analysis),
            ("üìã –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—ñ–≤", self.generate_reports),
            ("üìà –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤", self.create_charts)
        ]

        results = []

        for step_name, step_function in steps:
            print(f"\nüîÑ {step_name}...")
            try:
                result = step_function()
                results.append(result)
                if result:
                    print(f"‚úÖ {step_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
                else:
                    print(f"‚ùå {step_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏!")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {step_name}: {e}")
                results.append(False)

        successful_steps = sum(results)
        total_steps = len(results)

        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –ü–û–í–ù–û–ì–û –¶–ò–ö–õ–£")
        print("=" * 40)
        print(f"–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {successful_steps}/{total_steps} –∫—Ä–æ–∫—ñ–≤")

        for i, (step_name, _) in enumerate(steps):
            status = "‚úÖ" if results[i] else "‚ùå"
            print(f"{status} {step_name}")

        if successful_steps == total_steps:
            print("\nüéâ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏!")

    def handle_analysis_menu(self):
        """–û–±—Ä–æ–±–∫–∞ –º–µ–Ω—é –∞–Ω–∞–ª—ñ–∑—É"""
        while True:
            self.show_analysis_menu()
            choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

            if choice == '1':
                self.run_courier_analysis()
            elif choice == '2':
                self.run_department_analysis()
            elif choice == '3':
                self.run_processing_analysis()
            elif choice == '4':
                self.run_transport_analysis()
            elif choice == '5':
                self.run_all_analysis()
            elif choice == '0':
                break
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_charts_menu(self):
        """–û–±—Ä–æ–±–∫–∞ –º–µ–Ω—é –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
        while True:
            self.show_charts_menu()
            choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

            if choice == '1':
                self.chart_generator.create_courier_performance_charts()
            elif choice == '2':
                self.chart_generator.create_department_workload_charts()
            elif choice == '3':
                self.chart_generator.create_transport_utilization_charts()
            elif choice == '4':
                self.create_charts()
            elif choice == '0':
                break
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_reports_menu(self):
        """–û–±—Ä–æ–±–∫–∞ –º–µ–Ω—é –∑–≤—ñ—Ç—ñ–≤"""
        while True:
            self.show_reports_menu()
            choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

            if choice == '1':
                self.report_generator.generate_executive_summary()
            elif choice == '2':
                self.report_generator.generate_detailed_report()
            elif choice == '3':
                self.generate_reports()
            elif choice == '0':
                break
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def run(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏"""
        print("üéâ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏ –∞–Ω–∞–ª—ñ–∑—É Data Warehouse –ø–æ—à—Ç–æ–≤–æ—ó —Å–ª—É–∂–±–∏!")

        while True:
            try:
                self.show_main_menu()
                choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

                if choice == '1':
                    self.extract_data()
                elif choice == '2':
                    self.handle_analysis_menu()
                elif choice == '3':
                    self.handle_reports_menu()
                elif choice == '4':
                    self.handle_charts_menu()
                elif choice == '5':
                    self.full_cycle()
                elif choice == '6':
                    self.clean_old_files_menu()
                elif choice == '7':
                    self.show_file_status()
                elif choice == '8':
                    self.test_dw_connection()
                elif choice == '0':
                    print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                    break
                else:
                    print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

                if choice != '0':
                    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º. –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            except Exception as e:
                print(f"\n‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    system = PostDWAnalyticsSystem()
    system.run()

if __name__ == "__main__":
    main()