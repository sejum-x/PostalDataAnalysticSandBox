"""
–ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤—Å—å–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –∞–Ω–∞–ª—ñ–∑—É Data Warehouse –∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
NumPy 2.x compatible + Data Science –º–æ–¥–µ–ª—ñ
"""

import os
import sys
from datetime import datetime
import glob
import warnings

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è NumPy 2.x
warnings.filterwarnings('ignore', category=FutureWarning)
warnings.filterwarnings('ignore', category=UserWarning)

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
sys.path.append('.')

from data_extraction.data_extractor import DataWarehouseExtractor
from analysis.courier_analysis import CourierAnalyzer
from analysis.department_analysis import DepartmentAnalyzer
from analysis.processing_time_analysis import ProcessingTimeAnalyzer
from analysis.transport_analysis import TransportAnalyzer
from visualizations.charts import DWChartGenerator
from reports.report_generator import DWReportGenerator
from config.database_config import DatabaseConfig
from utils.helpers import get_latest_csv_file, create_directories, clean_old_files

# üß† Data Science —ñ–º–ø–æ—Ä—Ç–∏
from data_science.ds_controller import DataScienceController

class PostDWAnalyticsSystem:
    def __init__(self):
        self.config = DatabaseConfig()
        self.extractor = DataWarehouseExtractor()
        self.courier_analyzer = CourierAnalyzer()
        self.department_analyzer = DepartmentAnalyzer()
        self.processing_analyzer = ProcessingTimeAnalyzer()
        self.transport_analyzer = TransportAnalyzer()
        self.chart_generator = DWChartGenerator()
        self.report_generator = DWReportGenerator()

        # üß† Data Science –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä
        self.ds_controller = DataScienceController()

        create_directories()

    def show_main_menu(self):
        """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        print("\n" + "="*70)
        print("üè¢ –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–Ü–ó–£ DATA WAREHOUSE –ü–û–®–¢–û–í–û–á –°–õ–£–ñ–ë–ò")
        print("="*70)
        print("1. üì• –í–∏–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ Data Warehouse")
        print("2. üìä –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö")
        print("3. üìã –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç–∏")
        print("4. üìà –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó")
        print("5. üß† Data Science –∞–Ω–∞–ª—ñ–∑ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è")  # üÜï –ù–û–í–ò–ô –ü–£–ù–ö–¢
        print("6. üîÑ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª (–≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è + –∞–Ω–∞–ª—ñ–∑ + –∑–≤—ñ—Ç–∏ + –≥—Ä–∞—Ñ—ñ–∫–∏)")
        print("7. üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Ñ–∞–π–ª–∏")
        print("8. üìÅ –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª—ñ–≤")
        print("9. üîç –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ DW")
        print("0. ‚ùå –í–∏—Ö—ñ–¥")
        print("="*70)

    def show_analysis_menu(self):
        """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∞–Ω–∞–ª—ñ–∑—É"""
        print("\n" + "-"*60)
        print("üìä –ú–ï–ù–Æ –ê–ù–ê–õ–Ü–ó–£ DATA WAREHOUSE")
        print("-"*60)
        print("1. üöö –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫—É—Ä'—î—Ä—ñ–≤ (–ó–∞–≤–¥–∞–Ω–Ω—è 1)")
        print("2. üè¢ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö (–ó–∞–≤–¥–∞–Ω–Ω—è 2)")
        print("3. ‚è±Ô∏è –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å–∏–ª–æ–∫ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö (–ó–∞–≤–¥–∞–Ω–Ω—è 3)")
        print("4. üöõ –ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö (–ó–∞–≤–¥–∞–Ω–Ω—è 4)")
        print("5. üéØ –ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—Å—ñ –∞–Ω–∞–ª—ñ–∑–∏")
        print("0. ‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        print("-"*60)

    def show_charts_menu(self):
        """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
        print("\n" + "-"*50)
        print("üìà –ú–ï–ù–Æ –°–¢–í–û–†–ï–ù–ù–Ø –ì–†–ê–§–Ü–ö–Ü–í")
        print("-"*50)
        print("1. üöö –ì—Ä–∞—Ñ—ñ–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫—É—Ä'—î—Ä—ñ–≤")
        print("2. üè¢ –ì—Ä–∞—Ñ—ñ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å")
        print("3. üöõ –ì—Ä–∞—Ñ—ñ–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É")
        print("4. üé® –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏")
        print("0. ‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        print("-"*50)

    def show_reports_menu(self):
        """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—ñ–≤"""
        print("\n" + "-"*50)
        print("üìã –ú–ï–ù–Æ –ì–ï–ù–ï–†–ê–¶–Ü–á –ó–í–Ü–¢–Ü–í")
        print("-"*50)
        print("1. üìÑ –í–∏–∫–æ–Ω–∞–≤—á–∏–π –∑–≤—ñ—Ç")
        print("2. üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç")
        print("3. üìã –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—Å—ñ –∑–≤—ñ—Ç–∏")
        print("0. ‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        print("-"*50)

    # üß† –ù–û–í–ò–ô –ú–ï–¢–û–î: –ú–µ–Ω—é Data Science
    def show_data_science_menu(self):
        """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é Data Science –∞–Ω–∞–ª—ñ–∑—É"""
        print("\n" + "-"*60)
        print("üß† –ú–ï–ù–Æ DATA SCIENCE –ê–ù–ê–õ–Ü–ó–£ –¢–ê –ü–†–û–ì–ù–û–ó–£–í–ê–ù–ù–Ø")
        print("-"*60)
        print("1. üéØ –ü–æ–≤–Ω–∏–π Data Science –∞–Ω–∞–ª—ñ–∑")
        print("2. üìà –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å")
        print("3. üè¢ –ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å")
        print("4. üöõ –ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É")
        print("5. üìÖ –ê–Ω–∞–ª—ñ–∑ —Å–µ–∑–æ–Ω–Ω–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤")
        print("6. üí° –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
        print("7. üîÆ –®–≤–∏–¥–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è")
        print("8. üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å –æ–∑–Ω–∞–∫ –º–æ–¥–µ–ª—ñ")
        print("0. ‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        print("-"*60)

    def test_dw_connection(self):
        """–¢–µ—Å—Ç—É—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Data Warehouse"""
        print("\nüîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û DATA WAREHOUSE")
        print("-" * 50)

        success, message = self.extractor.test_connection()

        if success:
            print(f"‚úÖ {message}")
        else:
            print(f"‚ùå {message}")
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
            print("‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–∞ LocalDB")
            print("‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö PostDW —ñ—Å–Ω—É—î")
            print("‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É")

        return success

    def extract_data(self):
        """–í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Data Warehouse"""
        print("\nüîÑ –ü–û–ß–ê–¢–û–ö –í–ò–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• –ó DATA WAREHOUSE")
        print("=" * 60)

        try:
            results = self.extractor.extract_all_raw_data()

            if isinstance(results, dict) and 'error' in results:
                print(f"‚ùå {results['error']}")
                return False

            successful = sum(1 for result in results.values() if result.get('success', False))
            total = len(results)

            print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –í–ò–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø: {successful}/{total} —É—Å–ø—ñ—à–Ω–æ")

            for name, result in results.items():
                if result.get('success'):
                    print(f"‚úÖ {name}: {result.get('records_count', 0)} –∑–∞–ø–∏—Å—ñ–≤")
                else:
                    print(f"‚ùå {name}: {result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")

            return successful > 0

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: {e}")
            return False

    def get_available_files(self):
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"""
        files = {}

        patterns = {
            'courier_delivery': 'courier_delivery_raw_data_*.csv',
            'delivery_periodic': 'delivery_periodic_raw_data_*.csv'
        }

        for key, pattern in patterns.items():
            file_path = get_latest_csv_file(self.config.RAW_DATA_PATH, pattern)
            files[key] = file_path

        return files

    def run_courier_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É –∫—É—Ä'—î—Ä—ñ–≤ (–ó–∞–≤–¥–∞–Ω–Ω—è 1)"""
        files = self.get_available_files()

        if not files['courier_delivery']:
            print("‚ùå –§–∞–π–ª courier_delivery_raw_data –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            print("üí° –°–ø–æ—á–∞—Ç–∫—É –≤–∏–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –∑ Data Warehouse (–ø—É–Ω–∫—Ç 1)")
            return False

        try:
            print("üîÑ –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫—É—Ä'—î—Ä—ñ–≤...")
            results = self.courier_analyzer.analyze_courier_performance(files['courier_delivery'])

            if 'error' in results:
                print(f"‚ùå {results['error']}")
                return False

            print("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∫—É—Ä'—î—Ä—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {results['general_stats']['total_couriers']} –∫—É—Ä'—î—Ä—ñ–≤")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∫—É—Ä'—î—Ä—ñ–≤: {e}")
            return False

    def run_department_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö (–ó–∞–≤–¥–∞–Ω–Ω—è 2)"""
        files = self.get_available_files()

        if not files['delivery_periodic']:
            print("‚ùå –§–∞–π–ª delivery_periodic_raw_data –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            print("üí° –°–ø–æ—á–∞—Ç–∫—É –≤–∏–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –∑ Data Warehouse (–ø—É–Ω–∫—Ç 1)")
            return False

        try:
            print("üîÑ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö...")
            results = self.department_analyzer.analyze_department_workload_by_periods(files['delivery_periodic'])

            if 'error' in results:
                print(f"‚ùå {results['error']}")
                return False

            print("‚úÖ –ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {results['general_stats']['total_departments']} –≤—ñ–¥–¥—ñ–ª–µ–Ω—å")
            print(f"üìÖ –ó–∞ {results['general_stats']['total_periods']} –ø–µ—Ä—ñ–æ–¥—ñ–≤")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å: {e}")
            return False

    def run_processing_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö (–ó–∞–≤–¥–∞–Ω–Ω—è 3)"""
        files = self.get_available_files()

        if not files['delivery_periodic']:
            print("‚ùå –§–∞–π–ª delivery_periodic_raw_data –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            print("üí° –°–ø–æ—á–∞—Ç–∫—É –≤–∏–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –∑ Data Warehouse (–ø—É–Ω–∫—Ç 1)")
            return False

        try:
            print("üîÑ –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å–∏–ª–æ–∫ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö...")
            results = self.processing_analyzer.analyze_processing_times_by_periods(files['delivery_periodic'])

            if 'error' in results:
                print(f"‚ùå {results['error']}")
                return False

            print("‚úÖ –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {results['general_stats']['total_parcel_types']} —Ç–∏–ø—ñ–≤ –ø–æ—Å–∏–ª–æ–∫")
            print(f"üìÖ –ó–∞ {results['general_stats']['total_periods']} –ø–µ—Ä—ñ–æ–¥—ñ–≤")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏: {e}")
            return False

    def run_transport_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö (–ó–∞–≤–¥–∞–Ω–Ω—è 4)"""
        files = self.get_available_files()

        if not files['delivery_periodic']:
            print("‚ùå –§–∞–π–ª delivery_periodic_raw_data –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            print("üí° –°–ø–æ—á–∞—Ç–∫—É –≤–∏–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –∑ Data Warehouse (–ø—É–Ω–∫—Ç 1)")
            return False

        try:
            print("üîÑ –ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö...")
            results = self.transport_analyzer.analyze_transport_utilization_by_periods(files['delivery_periodic'])

            if 'error' in results:
                print(f"‚ùå {results['error']}")
                return False

            print("‚úÖ –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {results['general_stats']['total_transport_types']} —Ç–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É")
            print(f"üìÖ –ó–∞ {results['general_stats']['total_periods']} –ø–µ—Ä—ñ–æ–¥—ñ–≤")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É: {e}")
            return False

    def run_all_analysis(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤"""
        print("\nüöÄ –ó–ê–ü–£–°–ö –í–°–Ü–• –ê–ù–ê–õ–Ü–ó–Ü–í DATA WAREHOUSE")
        print("=" * 50)

        analyses = [
            ("üöö –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫—É—Ä'—î—Ä—ñ–≤", self.run_courier_analysis),
            ("üè¢ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å", self.run_department_analysis),
            ("‚è±Ô∏è –ß–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å–∏–ª–æ–∫", self.run_processing_analysis),
            ("üöõ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É", self.run_transport_analysis)
        ]

        results = {}

        for name, analysis_func in analyses:
            print(f"\nüîÑ {name}...")
            try:
                results[name] = analysis_func()
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {name}: {e}")
                results[name] = False

        successful = sum(results.values())
        total = len(results)

        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –ê–ù–ê–õ–Ü–ó–Ü–í: {successful}/{total} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print("=" * 50)

        for analysis_name, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            print(f"{status} {analysis_name}")

        return successful > 0

    # üß† –ù–û–í–Ü –ú–ï–¢–û–î–ò DATA SCIENCE

    def run_full_data_science_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ Data Science –∞–Ω–∞–ª—ñ–∑—É"""
        print("\nüß† –ó–ê–ü–£–°–ö –ü–û–í–ù–û–ì–û DATA SCIENCE –ê–ù–ê–õ–Ü–ó–£")
        print("=" * 50)

        try:
            results = self.ds_controller.run_full_analysis()

            if results['summary']['status'] == 'completed':
                print(f"‚úÖ Data Science –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                print(f"üìä –£—Å–ø—ñ—à–Ω–æ: {results['summary']['successful_components']}/{results['summary']['total_components']} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤")

                # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—ñ–¥—Å—É–º–æ–∫
                if 'next_month_forecast' in results['components'] and 'error' not in results['components']['next_month_forecast']:
                    forecast = results['components']['next_month_forecast']['summary']
                    print(f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å: {forecast['total_predicted_deliveries']} –¥–æ—Å—Ç–∞–≤–æ–∫")

                return True
            else:
                print("‚ùå Data Science –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")
                return False

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ Data Science –∞–Ω–∞–ª—ñ–∑—ñ: {e}")
            return False

    def forecast_next_month(self):
        """–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å"""
        print("\nüìà –ü–†–û–ì–ù–û–ó–£–í–ê–ù–ù–Ø –î–û–°–¢–ê–í–û–ö –ù–ê –ù–ê–°–¢–£–ü–ù–ò–ô –ú–Ü–°–Ø–¶–¨")
        print("-" * 50)

        try:
            # –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–≤—á–∞—î–º–æ –º–æ–¥–µ–ª—å
            print("üéØ –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è...")
            training_results = self.ds_controller.delivery_forecast.train_forecast_model()

            if 'error' in training_results:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è: {training_results['error']}")
                return False

            print(f"‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–≤—á–µ–Ω–∞! R¬≤ = {training_results['model_metrics']['test_r2']:.3f}")

            # –†–æ–±–∏–º–æ –ø—Ä–æ–≥–Ω–æ–∑
            print("üîÆ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É...")
            forecast_results = self.ds_controller.delivery_forecast.forecast_next_month()

            if 'error' in forecast_results:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è: {forecast_results['error']}")
                return False

            # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            summary = forecast_results['summary']
            print(f"\nüìä –ü–†–û–ì–ù–û–ó –ù–ê {summary['forecast_period']}:")
            print(f"üéØ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫: {summary['total_predicted_deliveries']}")
            print(f"üè¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω—å: {summary['total_departments']}")

            print(f"\nüåç –¢–û–ü-5 –†–ï–ì–Ü–û–ù–Ü–í:")
            sorted_regions = sorted(summary['region_forecasts'].items(), key=lambda x: x[1], reverse=True)
            for i, (region, count) in enumerate(sorted_regions[:5], 1):
                print(f"  {i}. {region}: {count} –¥–æ—Å—Ç–∞–≤–æ–∫")

            print(f"\nüì¶ –¢–û–ü-3 –¢–ò–ü–ò –ü–û–°–ò–õ–û–ö:")
            sorted_parcels = sorted(summary['parcel_type_forecasts'].items(), key=lambda x: x[1], reverse=True)
            for i, (parcel_type, count) in enumerate(sorted_parcels[:3], 1):
                print(f"  {i}. {parcel_type}: {count} –¥–æ—Å—Ç–∞–≤–æ–∫")

            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è: {e}")
            return False

    def analyze_department_efficiency(self):
        """–ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å"""
        print("\nüè¢ –ê–ù–ê–õ–Ü–ó –ï–§–ï–ö–¢–ò–í–ù–û–°–¢–Ü –í–Ü–î–î–Ü–õ–ï–ù–¨")
        print("-" * 40)

        try:
            dept_performance = self.ds_controller.efficiency_analyzer.analyze_department_performance()

            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {len(dept_performance)} –≤—ñ–¥–¥—ñ–ª–µ–Ω—å")

            # –¢–æ–ø-5 –Ω–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö
            top_depts = dept_performance.nlargest(5, 'efficiency_score')
            print(f"\nüèÜ –¢–û–ü-5 –ù–ê–ô–ï–§–ï–ö–¢–ò–í–ù–Ü–®–ò–• –í–Ü–î–î–Ü–õ–ï–ù–¨:")
            for i, (_, dept) in enumerate(top_depts.iterrows(), 1):
                print(f"  {i}. {dept['department_number']} ({dept['department_city']})")
                print(f"     –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {dept['efficiency_score']:.3f}, –î–æ—Å—Ç–∞–≤–æ–∫: {dept['total_deliveries']}")

            # –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è, —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
            low_performance = dept_performance[dept_performance['performance_category'] == 'Needs_Improvement']
            if len(low_performance) > 0:
                print(f"\n‚ö†Ô∏è –í–Ü–î–î–Ü–õ–ï–ù–ù–Ø, –©–û –ü–û–¢–†–ï–ë–£–Æ–¢–¨ –ü–û–ö–†–ê–©–ï–ù–ù–Ø: {len(low_performance)}")
                for _, dept in low_performance.head(3).iterrows():
                    print(f"  ‚Ä¢ {dept['department_number']} ({dept['department_city']})")
                    print(f"    –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {dept['efficiency_score']:.3f}")

            # –ê–Ω–æ–º–∞–ª—å–Ω—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è
            anomalies = dept_performance[dept_performance['is_anomaly'] == True]
            if len(anomalies) > 0:
                print(f"\nüîç –í–ò–Ø–í–õ–ï–ù–û –ê–ù–û–ú–ê–õ–Ü–á: {len(anomalies)} –≤—ñ–¥–¥—ñ–ª–µ–Ω—å")
                for _, dept in anomalies.iterrows():
                    print(f"  ‚ö° {dept['department_number']} ({dept['department_city']}) - –ø–æ—Ç—Ä–µ–±—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")

            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
            return False

    def analyze_transport_efficiency(self):
        """–ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É"""
        print("\nüöõ –ê–ù–ê–õ–Ü–ó –ï–§–ï–ö–¢–ò–í–ù–û–°–¢–Ü –¢–†–ê–ù–°–ü–û–†–¢–£")
        print("-" * 40)

        try:
            transport_analysis = self.ds_controller.efficiency_analyzer.analyze_transport_efficiency()

            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {len(transport_analysis)} —Ç–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É")

            # –°–æ—Ä—Ç—É—î–º–æ –ø–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            transport_sorted = transport_analysis.sort_values('transport_efficiency_score', ascending=False)

            print(f"\nüèÜ –†–ï–ô–¢–ò–ù–ì –ï–§–ï–ö–¢–ò–í–ù–û–°–¢–Ü –¢–†–ê–ù–°–ü–û–†–¢–£:")
            for i, (_, transport) in enumerate(transport_sorted.iterrows(), 1):
                print(f"  {i}. {transport['transport_type_name']}")
                print(f"     –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {transport['transport_efficiency_score']:.3f}")
                print(f"     –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ {transport['departments_using']} –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è—Ö")
                print(f"     –°–µ—Ä–µ–¥–Ω—è –≤–∞–≥–∞: {transport['avg_max_weight']:.1f} –∫–≥")

            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É: {e}")
            return False

    def analyze_seasonal_patterns(self):
        """–ê–Ω–∞–ª—ñ–∑ —Å–µ–∑–æ–Ω–Ω–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤"""
        print("\nüìÖ –ê–ù–ê–õ–Ü–ó –°–ï–ó–û–ù–ù–ò–• –ü–ê–¢–ï–†–ù–Ü–í")
        print("-" * 35)

        try:
            seasonal_analysis = self.ds_controller.efficiency_analyzer.analyze_seasonal_patterns()

            # –ú—ñ—Å—è—á–Ω—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏
            monthly_patterns = seasonal_analysis['monthly_patterns']
            print("üìä –ê–ö–¢–ò–í–ù–Ü–°–¢–¨ –ü–û –ú–Ü–°–Ø–¶–Ø–•:")

            months_names = {
                1: '–°—ñ—á–µ–Ω—å', 2: '–õ—é—Ç–∏–π', 3: '–ë–µ—Ä–µ–∑–µ–Ω—å', 4: '–ö–≤—ñ—Ç–µ–Ω—å',
                5: '–¢—Ä–∞–≤–µ–Ω—å', 6: '–ß–µ—Ä–≤–µ–Ω—å', 7: '–õ–∏–ø–µ–Ω—å', 8: '–°–µ—Ä–ø–µ–Ω—å',
                9: '–í–µ—Ä–µ—Å–µ–Ω—å', 10: '–ñ–æ–≤—Ç–µ–Ω—å', 11: '–õ–∏—Å—Ç–æ–ø–∞–¥', 12: '–ì—Ä—É–¥–µ–Ω—å'
            }

            for month, data in monthly_patterns.items():
                month_name = months_names.get(month, f"–ú—ñ—Å—è—Ü—å {month}")
                print(f"  {month_name}: {data['total_deliveries']} –¥–æ—Å—Ç–∞–≤–æ–∫, "
                      f"—á–∞—Å –æ–±—Ä–æ–±–∫–∏: {data['avg_processing_time']:.1f} –≥–æ–¥")

            # –°–µ–∑–æ–Ω–Ω—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏
            seasonal_patterns = seasonal_analysis['seasonal_patterns']
            if seasonal_patterns:
                print(f"\nüåç –°–ï–ó–û–ù–ù–ê –ê–ö–¢–ò–í–ù–Ü–°–¢–¨:")
                season_names = {'Winter': '–ó–∏–º–∞', 'Spring': '–í–µ—Å–Ω–∞', 'Summer': '–õ—ñ—Ç–æ', 'Autumn': '–û—Å—ñ–Ω—å'}

                for season, data in seasonal_patterns.items():
                    season_name = season_names.get(season, season)
                    print(f"  {season_name}: {data['total_deliveries']} –¥–æ—Å—Ç–∞–≤–æ–∫, "
                          f"{data['active_departments']} –∞–∫—Ç–∏–≤–Ω–∏—Ö –≤—ñ–¥–¥—ñ–ª–µ–Ω—å")

            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {e}")
            return False

    def generate_optimization_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
        print("\nüí° –ì–ï–ù–ï–†–ê–¶–Ü–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–ô –î–õ–Ø –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–á")
        print("-" * 45)

        try:
            recommendations = self.ds_controller.efficiency_analyzer.generate_improvement_recommendations()

            if not recommendations:
                print("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ!")
                return True

            print(f"üìã –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π:")

            # –ì—Ä—É–ø—É—î–º–æ –ø–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
            high_priority = [r for r in recommendations if r['priority'] == 'high']
            medium_priority = [r for r in recommendations if r['priority'] == 'medium']

            if high_priority:
                print(f"\nüî• –í–ò–°–û–ö–ò–ô –ü–†–Ü–û–†–ò–¢–ï–¢ ({len(high_priority)}):")
                for i, rec in enumerate(high_priority, 1):
                    print(f"  {i}. {rec['target']}")
                    print(f"     –¢–∏–ø: {rec['type']}")
                    for issue in rec['issues']:
                        print(f"     ‚ö†Ô∏è {issue}")
                    print(f"     üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
                    for suggestion in rec['suggestions']:
                        print(f"       ‚Ä¢ {suggestion}")
                    print()

            if medium_priority:
                print(f"\nüìã –°–ï–†–ï–î–ù–Ü–ô –ü–†–Ü–û–†–ò–¢–ï–¢ ({len(medium_priority)}):")
                for i, rec in enumerate(medium_priority, 1):
                    print(f"  {i}. {rec['target']}")
                    print(f"     üí° {rec['suggestions'][0] if rec['suggestions'] else '–ù–µ–º–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π'}")

            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {e}")
            return False

    def quick_department_forecast(self):
        """–®–≤–∏–¥–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è"""
        print("\nüîÆ –®–í–ò–î–ö–ò–ô –ü–†–û–ì–ù–û–ó –î–õ–Ø –í–Ü–î–î–Ü–õ–ï–ù–ù–Ø")
        print("-" * 35)

        try:
            dept_id = input("–í–≤–µ–¥—ñ—Ç—å ID –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è (–∞–±–æ Enter –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É): ").strip()

            if dept_id:
                try:
                    dept_id = int(dept_id)
                    forecast = self.ds_controller.get_quick_forecast(dept_id)
                except ValueError:
                    print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è!")
                    return False
            else:
                forecast = self.ds_controller.get_quick_forecast()

            if 'error' in forecast:
                print(f"‚ùå {forecast['error']}")
                return False

            if isinstance(forecast, list):
                # –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è
                if forecast:
                    dept_forecast = forecast[0]
                    print(f"üè¢ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {dept_forecast['department_number']} ({dept_forecast['department_city']})")
                    print(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Å—Ç–∞–≤–æ–∫: {dept_forecast['predicted_deliveries']}")
                    print(f"üìÖ –ü–µ—Ä—ñ–æ–¥: {dept_forecast['forecast_month']}/{dept_forecast['forecast_year']}")
                    print(f"üéØ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {dept_forecast['confidence']}")
                else:
                    print("‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Ü—å–æ–≥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
            else:
                # –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
                print(f"üéØ –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {forecast['forecast_period']}:")
                print(f"üì¶ –í—Å—å–æ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: {forecast['total_predicted_deliveries']}")
                print(f"üè¢ –í—ñ–¥–¥—ñ–ª–µ–Ω—å: {forecast['total_departments']}")

            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —à–≤–∏–¥–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É: {e}")
            return False

    def show_model_feature_importance(self):
        """–ü–æ–∫–∞–∑—É—î –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å –æ–∑–Ω–∞–∫ –º–æ–¥–µ–ª—ñ"""
        print("\nüìä –í–ê–ñ–õ–ò–í–Ü–°–¢–¨ –û–ó–ù–ê–ö –ú–û–î–ï–õ–Ü –ü–†–û–ì–ù–û–ó–£–í–ê–ù–ù–Ø")
        print("-" * 45)

        try:
            # –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–≤—á–∞—î–º–æ –º–æ–¥–µ–ª—å, —è–∫—â–æ –Ω–µ –Ω–∞–≤—á–µ–Ω–∞
            if not hasattr(self.ds_controller.delivery_forecast, 'model') or self.ds_controller.delivery_forecast.model is None:
                print("üéØ –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
                training_results = self.ds_controller.delivery_forecast.train_forecast_model()
                if 'error' in training_results:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è: {training_results['error']}")
                    return False

            # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å –æ–∑–Ω–∞–∫
            importance = self.ds_controller.delivery_forecast.get_feature_importance()

            if not importance:
                print("‚ùå –í–∞–∂–ª–∏–≤—ñ—Å—Ç—å –æ–∑–Ω–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ü—ñ—î—ó –º–æ–¥–µ–ª—ñ")
                return False

            print("üèÜ –¢–û–ü-10 –ù–ê–ô–í–ê–ñ–õ–ò–í–Ü–®–ò–• –û–ó–ù–ê–ö:")
            for i, feature_info in enumerate(importance[:10], 1):
                feature_name = feature_info['feature']
                importance_score = feature_info['importance']

                # –ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–∞–∑–≤ –æ–∑–Ω–∞–∫
                feature_translations = {
                    'department_id': 'ID –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è',
                    'parcel_type_id': '–¢–∏–ø –ø–æ—Å–∏–ª–∫–∏',
                    'start_month': '–ú—ñ—Å—è—Ü—å',
                    'processing_time_hours': '–ß–∞—Å –æ–±—Ä–æ–±–∫–∏',
                    'parcel_max_weight': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞',
                    'dept_avg_deliveries': '–°–µ—Ä–µ–¥–Ω—ñ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è',
                    'region_avg_deliveries': '–°–µ—Ä–µ–¥–Ω—ñ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–µ–≥—ñ–æ–Ω—É',
                    'is_winter': '–ó–∏–º–æ–≤–∏–π —Å–µ–∑–æ–Ω',
                    'is_spring': '–í–µ—Å–Ω—è–Ω–∏–π —Å–µ–∑–æ–Ω'
                }

                translated_name = feature_translations.get(feature_name, feature_name)
                bar_length = int(importance_score * 50)  # –í—ñ–∑—É–∞–ª—å–Ω–∞ —à–∫–∞–ª–∞
                bar = "‚ñà" * bar_length + "‚ñë" * (50 - bar_length)

                print(f"  {i:2d}. {translated_name:<25} {importance_score:.3f} |{bar}|")

            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ –æ–∑–Ω–∞–∫: {e}")
            return False

    def create_charts(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
        print("\nüé® –°–¢–í–û–†–ï–ù–ù–Ø –ì–†–ê–§–Ü–ö–Ü–í...")

        try:
            self.chart_generator.create_all_charts()
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤: {e}")
            return False

    def generate_reports(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—ñ–≤"""
        print("\nüìã –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ó–í–Ü–¢–Ü–í...")

        try:
            reports = self.report_generator.generate_all_reports()
            print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(reports)} –∑–≤—ñ—Ç—ñ–≤")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—ñ–≤: {e}")
            return False

    def show_file_status(self):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª—ñ–≤"""
        print("\nüìÅ –°–¢–ê–¢–£–° –§–ê–ô–õ–Ü–í DATA WAREHOUSE")
        print("-" * 50)

        files = self.get_available_files()

        print("üì• –í–ò–•–Ü–î–ù–Ü –î–ê–ù–Ü:")
        for file_type, file_path in files.items():
            if file_path and os.path.exists(file_path):
                file_size = os.path.getsize(file_path) / 1024
                mod_time = datetime.fromtimestamp(os.path.getmtime(file_path))
                print(f"  ‚úÖ {file_type}: {os.path.basename(file_path)}")
                print(f"     üìä –†–æ–∑–º—ñ—Ä: {file_size:.1f} KB, üïí {mod_time.strftime('%d.%m.%Y %H:%M')}")
            else:
                print(f"  ‚ùå {file_type}: —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è—Ö
        directories = [
            ("üìä –û–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ", self.config.PROCESSED_DATA_PATH, "*.json"),
            ("üìà –ì—Ä–∞—Ñ—ñ–∫–∏", self.config.CHARTS_PATH, "*.png"),
            ("üìã –ó–≤—ñ—Ç–∏", self.config.REPORTS_PATH, "*.txt"),
            ("üß† ML –º–æ–¥–µ–ª—ñ", os.path.join(self.config.PROCESSED_DATA_PATH, 'models'), "*.joblib")  # üÜï
        ]

        print(f"\nüìÇ –ó–ì–ï–ù–ï–†–û–í–ê–ù–Ü –§–ê–ô–õ–ò:")
        for name, path, pattern in directories:
            if os.path.exists(path):
                files_count = len(glob.glob(os.path.join(path, pattern)))
                print(f"  {name}: {files_count} —Ñ–∞–π–ª—ñ–≤")
            else:
                print(f"  {name}: –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ —ñ—Å–Ω—É—î")

    def clean_old_files_menu(self):
        """–ú–µ–Ω—é –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        print("\nüßπ –û–ß–ò–©–ï–ù–ù–Ø –°–¢–ê–†–ò–• –§–ê–ô–õ–Ü–í")
        print("-" * 30)
        print("–°–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ñ–∞–π–ª–∏?")
        print("1. 1 –¥–µ–Ω—å")
        print("2. 3 –¥–Ω—ñ")
        print("3. 7 –¥–Ω—ñ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)")
        print("4. 30 –¥–Ω—ñ–≤")
        print("0. –°–∫–∞—Å—É–≤–∞—Ç–∏")

        choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

        days_map = {'1': 1, '2': 3, '3': 7, '4': 30}

        if choice in days_map:
            days = days_map[choice]
            try:
                directories = [
                    self.config.RAW_DATA_PATH,
                    self.config.PROCESSED_DATA_PATH,
                    self.config.CHARTS_PATH,
                    self.config.REPORTS_PATH
                ]

                for directory in directories:
                    clean_old_files(directory, days)

                print(f"‚úÖ –§–∞–π–ª–∏ —Å—Ç–∞—Ä—à—ñ {days} –¥–Ω—ñ–≤ –≤–∏–¥–∞–ª–µ–Ω–æ!")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ: {e}")
        elif choice == '0':
            return
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")

    def full_cycle(self):
        """–ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –æ–±—Ä–æ–±–∫–∏"""
        print("\nüöÄ –ó–ê–ü–£–°–ö –ü–û–í–ù–û–ì–û –¶–ò–ö–õ–£ DATA WAREHOUSE –ê–ù–ê–õ–Ü–ó–£")
        print("=" * 60)

        steps = [
            ("üì• –í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ DW", self.extract_data),
            ("üìä –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö", self.run_all_analysis),
            ("üß† Data Science –∞–Ω–∞–ª—ñ–∑", self.run_full_data_science_analysis),  # üÜï
            ("üìã –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—ñ–≤", self.generate_reports),
            ("üìà –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤", self.create_charts)
        ]

        results = []

        for step_name, step_function in steps:
            print(f"\nüîÑ {step_name}...")
            try:
                result = step_function()
                results.append(result)
                if result:
                    print(f"‚úÖ {step_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
                else:
                    print(f"‚ùå {step_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏!")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {step_name}: {e}")
                results.append(False)

        successful_steps = sum(results)
        total_steps = len(results)

        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –ü–û–í–ù–û–ì–û –¶–ò–ö–õ–£")
        print("=" * 40)
        print(f"–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {successful_steps}/{total_steps} –∫—Ä–æ–∫—ñ–≤")

        for i, (step_name, _) in enumerate(steps):
            status = "‚úÖ" if results[i] else "‚ùå"
            print(f"{status} {step_name}")

        if successful_steps == total_steps:
            print("\nüéâ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏!")

    def handle_analysis_menu(self):
        """–û–±—Ä–æ–±–∫–∞ –º–µ–Ω—é –∞–Ω–∞–ª—ñ–∑—É"""
        while True:
            self.show_analysis_menu()
            choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

            if choice == '1':
                self.run_courier_analysis()
            elif choice == '2':
                self.run_department_analysis()
            elif choice == '3':
                self.run_processing_analysis()
            elif choice == '4':
                self.run_transport_analysis()
            elif choice == '5':
                self.run_all_analysis()
            elif choice == '0':
                break
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_charts_menu(self):
        """–û–±—Ä–æ–±–∫–∞ –º–µ–Ω—é –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
        while True:
            self.show_charts_menu()
            choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

            if choice == '1':
                self.chart_generator.create_courier_performance_charts()
            elif choice == '2':
                self.chart_generator.create_department_workload_charts()
            elif choice == '3':
                self.chart_generator.create_transport_utilization_charts()
            elif choice == '4':
                self.create_charts()
            elif choice == '0':
                break
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_reports_menu(self):
        """–û–±—Ä–æ–±–∫–∞ –º–µ–Ω—é –∑–≤—ñ—Ç—ñ–≤"""
        while True:
            self.show_reports_menu()
            choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

            if choice == '1':
                self.report_generator.generate_executive_summary()
            elif choice == '2':
                self.report_generator.generate_detailed_report()
            elif choice == '3':
                self.generate_reports()
            elif choice == '0':
                break
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    # üß† –ù–û–í–ò–ô –ú–ï–¢–û–î: –û–±—Ä–æ–±–∫–∞ –º–µ–Ω—é Data Science
    def handle_data_science_menu(self):
        """–û–±—Ä–æ–±–∫–∞ –º–µ–Ω—é Data Science"""
        while True:
            self.show_data_science_menu()
            choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

            if choice == '1':
                self.run_full_data_science_analysis()
            elif choice == '2':
                self.forecast_next_month()
            elif choice == '3':
                self.analyze_department_efficiency()
            elif choice == '4':
                self.analyze_transport_efficiency()
            elif choice == '5':
                self.analyze_seasonal_patterns()
            elif choice == '6':
                self.generate_optimization_recommendations()
            elif choice == '7':
                self.quick_department_forecast()
            elif choice == '8':
                self.show_model_feature_importance()
            elif choice == '0':
                break
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def run(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏"""
        print("üéâ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏ –∞–Ω–∞–ª—ñ–∑—É Data Warehouse –ø–æ—à—Ç–æ–≤–æ—ó —Å–ª—É–∂–±–∏!")
        print("üß† –¢–µ–ø–µ—Ä –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Data Science —Ç–∞ Machine Learning!")

        while True:
            try:
                self.show_main_menu()
                choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä: ").strip()

                if choice == '1':
                    self.extract_data()
                elif choice == '2':
                    self.handle_analysis_menu()
                elif choice == '3':
                    self.handle_reports_menu()
                elif choice == '4':
                    self.handle_charts_menu()
                elif choice == '5':  # üÜï Data Science –º–µ–Ω—é
                    self.handle_data_science_menu()
                elif choice == '6':
                    self.full_cycle()
                elif choice == '7':
                    self.clean_old_files_menu()
                elif choice == '8':
                    self.show_file_status()
                elif choice == '9':
                    self.test_dw_connection()
                elif choice == '0':
                    print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                    break
                else:
                    print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

                if choice != '0':
                    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º. –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            except Exception as e:
                print(f"\n‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    system = PostDWAnalyticsSystem()
    system.run()

if __name__ == "__main__":
    main()