# data_science/ds_controller.py
import pandas as pd
import numpy as np
from datetime import datetime
import sys

sys.path.append('..')

from data_science.predictors.delivery_forecast import DeliveryForecast
from data_science.analyzers.efficiency_analyzer import EfficiencyAnalyzer
from utils.helpers import get_latest_csv_file
from config.database_config import DatabaseConfig


class DataScienceController:
    """–ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è –≤—Å—ñ—Ö Data Science –æ–ø–µ—Ä–∞—Ü—ñ–π"""

    def __init__(self):
        self.config = DatabaseConfig()
        self.delivery_forecast = DeliveryForecast()
        self.efficiency_analyzer = EfficiencyAnalyzer()

    def run_full_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ Data Science –∞–Ω–∞–ª—ñ–∑—É"""
        print("üß† –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ Data Science –∞–Ω–∞–ª—ñ–∑—É...")

        results = {
            'analysis_timestamp': datetime.now().isoformat(),
            'components': {}
        }

        try:
            # 1. –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
            print("\n1Ô∏è‚É£ –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–æ–∫...")
            forecast_training = self.delivery_forecast.train_forecast_model()
            results['components']['forecast_model_training'] = forecast_training

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –Ω–∞–≤—á–∞–Ω–Ω—ñ –º–æ–¥–µ–ª—ñ: {e}")
            results['components']['forecast_model_training'] = {'error': str(e)}

        try:
            # 2. –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å
            print("\n2Ô∏è‚É£ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å...")
            next_month_forecast = self.delivery_forecast.forecast_next_month()
            results['components']['next_month_forecast'] = next_month_forecast

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—ñ: {e}")
            results['components']['next_month_forecast'] = {'error': str(e)}

        try:
            # 3. –ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å
            print("\n3Ô∏è‚É£ –ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å...")
            dept_performance = self.efficiency_analyzer.analyze_department_performance()
            results['components']['department_performance'] = dept_performance.to_dict('records')

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∞–Ω–∞–ª—ñ–∑—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å: {e}")
            results['components']['department_performance'] = {'error': str(e)}

        try:
            # 4. –ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
            print("\n4Ô∏è‚É£ –ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É...")
            transport_efficiency = self.efficiency_analyzer.analyze_transport_efficiency()
            results['components']['transport_efficiency'] = transport_efficiency.to_dict('records')

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∞–Ω–∞–ª—ñ–∑—ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É: {e}")
            results['components']['transport_efficiency'] = {'error': str(e)}

        try:
            # 5. –ê–Ω–∞–ª—ñ–∑ —Å–µ–∑–æ–Ω–Ω–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤
            print("\n5Ô∏è‚É£ –ê–Ω–∞–ª—ñ–∑ —Å–µ–∑–æ–Ω–Ω–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤...")
            seasonal_patterns = self.efficiency_analyzer.analyze_seasonal_patterns()
            results['components']['seasonal_patterns'] = seasonal_patterns

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Å–µ–∑–æ–Ω–Ω–æ–º—É –∞–Ω–∞–ª—ñ–∑—ñ: {e}")
            results['components']['seasonal_patterns'] = {'error': str(e)}

        try:
            # 6. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
            print("\n6Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π...")
            recommendations = self.efficiency_analyzer.generate_improvement_recommendations()
            results['components']['recommendations'] = recommendations

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {e}")
            results['components']['recommendations'] = {'error': str(e)}

        # –ü—ñ–¥—Å—É–º–æ–∫
        successful_components = sum(1 for comp in results['components'].values()
                                    if not isinstance(comp, dict) or 'error' not in comp)
        total_components = len(results['components'])

        results['summary'] = {
            'successful_components': successful_components,
            'total_components': total_components,
            'success_rate': successful_components / total_components if total_components > 0 else 0,
            'status': 'completed' if successful_components > 0 else 'failed'
        }

        print(f"\n‚úÖ Data Science –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ: {successful_components}/{total_components} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤")

        return results

    def get_quick_forecast(self, department_id=None):
        """–®–≤–∏–¥–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –∞–±–æ –∑–∞–≥–∞–ª—å–Ω–∏–π"""
        try:
            forecast_data = self.delivery_forecast.forecast_next_month()

            if department_id:
                dept_forecast = [
                    f for f in forecast_data['detailed_forecasts']
                    if f['department_id'] == department_id
                ]
                return dept_forecast if dept_forecast else {'error': '–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}

            return forecast_data['summary']

        except Exception as e:
            return {'error': f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è: {str(e)}'}