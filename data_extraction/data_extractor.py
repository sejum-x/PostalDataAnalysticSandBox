"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –°–ò–†–ò–• –¥–∞–Ω–∏—Ö –∑ Data Warehouse
"""

import pyodbc
import pandas as pd
import numpy as np
from datetime import datetime
import os
import sys
import warnings

warnings.filterwarnings('ignore')
sys.path.append('..')

from config.database_config import DatabaseConfig
from data_extraction.sql_queries import DWQueries

class DataWarehouseExtractor:
    def __init__(self):
        self.config = DatabaseConfig()
        self.queries = DWQueries()

    def test_connection(self):
        """–¢–µ—Å—Ç—É—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Data Warehouse"""
        print("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Data Warehouse...")

        try:
            print(f"üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ: {self.config.SERVER}")
            print(f"üìä Data Warehouse: {self.config.DATABASE}")

            connection = pyodbc.connect(self.config.CONNECTION_STRING)
            cursor = connection.cursor()

            # –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç
            cursor.execute("SELECT @@VERSION")
            version = cursor.fetchone()[0]
            print(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!")
            print(f"üìã –í–µ—Ä—Å—ñ—è SQL Server: {version[:50]}...")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—å DW
            cursor.execute("""
                SELECT TABLE_NAME 
                FROM INFORMATION_SCHEMA.TABLES 
                WHERE TABLE_TYPE = 'BASE TABLE'
                AND (TABLE_NAME LIKE '%Fact' OR TABLE_NAME LIKE '%Dim')
                ORDER BY TABLE_NAME
            """)

            tables = [row[0] for row in cursor.fetchall()]
            print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ DW —Ç–∞–±–ª–∏—Ü—å: {len(tables)}")

            if tables:
                print("üìã –¢–∞–±–ª–∏—Ü—ñ Data Warehouse:")
                fact_tables = [t for t in tables if 'Fact' in t]
                dim_tables = [t for t in tables if 'Dim' in t]

                if fact_tables:
                    print("   üéØ –¢–∞–±–ª–∏—Ü—ñ —Ñ–∞–∫—Ç—ñ–≤:")
                    for table in fact_tables:
                        print(f"      ‚Ä¢ {table}")

                if dim_tables:
                    print("   üìê –¢–∞–±–ª–∏—Ü—ñ –≤–∏–º—ñ—Ä—ñ–≤:")
                    for table in dim_tables:
                        print(f"      ‚Ä¢ {table}")

            connection.close()
            return True, "–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ DW —É—Å–ø—ñ—à–Ω–µ"

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ DW: {e}")
            return False, str(e)

    def get_connection(self):
        """–°—Ç–≤–æ—Ä—é—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Data Warehouse"""
        try:
            connection = pyodbc.connect(self.config.CONNECTION_STRING)
            return connection
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ DW: {e}")
            return None

    def extract_courier_delivery_data(self):
        """–ó–∞–≤–¥–∞–Ω–Ω—è 1: –°–∏—Ä—ñ –¥–∞–Ω—ñ –∫—É—Ä'—î—Ä—Å—å–∫–æ—ó –¥–æ—Å—Ç–∞–≤–∫–∏"""
        query = self.queries.get_courier_delivery_data()
        return self._execute_query(query, 'courier_delivery_raw_data')

    def extract_delivery_periodic_data(self):
        """–ó–∞–≤–¥–∞–Ω–Ω—è 2,3,4: –°–∏—Ä—ñ –¥–∞–Ω—ñ –∑ DeliveryPeriodicFact –¥–ª—è –≤—Å—ñ—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤"""
        query = self.queries.get_delivery_periodic_data()
        return self._execute_query(query, 'delivery_periodic_raw_data')

    def _execute_query(self, query, filename_prefix):
        """–í–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –°–ò–†–Ü –¥–∞–Ω—ñ —É CSV"""
        connection = self.get_connection()

        if not connection:
            return {'success': False, 'filename': None, 'error': '–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ DW'}

        try:
            print(f"üîÑ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö: {filename_prefix}...")
            df = pd.read_sql(query, connection)

            if df.empty:
                print(f"‚ö†Ô∏è –ó–∞–ø–∏—Ç {filename_prefix} –ø–æ–≤–µ—Ä–Ω—É–≤ –ø—É—Å—Ç—ñ –¥–∞–Ω—ñ")
                return {'success': False, 'filename': None, 'error': '–ó–∞–ø–∏—Ç –ø–æ–≤–µ—Ä–Ω—É–≤ –ø—É—Å—Ç—ñ –¥–∞–Ω—ñ'}

            # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"{filename_prefix}_{timestamp}.csv"
            filepath = os.path.join(self.config.RAW_DATA_PATH, filename)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –°–ò–†–Ü –¥–∞–Ω—ñ —É CSV
            df.to_csv(filepath, index=False, encoding='utf-8')

            print(f"‚úÖ {filename_prefix}: {len(df)} –∑–∞–ø–∏—Å—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {filename}")
            print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {', '.join(df.columns[:5])}{'...' if len(df.columns) > 5 else ''}")

            return {
                'success': True,
                'filename': filename,
                'filepath': filepath,
                'records_count': len(df),
                'columns': list(df.columns)
            }

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö {filename_prefix}: {e}")
            return {'success': False, 'filename': None, 'error': str(e)}

        finally:
            connection.close()

    def extract_all_raw_data(self):
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –°–ò–†–Ü –¥–∞–Ω—ñ –∑ Data Warehouse"""
        print("üöÄ –ü–æ—á–∞—Ç–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –°–ò–†–ò–• –¥–∞–Ω–∏—Ö –∑ Data Warehouse...")

        # –°–ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        success, message = self.test_connection()
        if not success:
            print(f"‚ùå {message}")
            return {'error': '–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ DW'}

        print(f"‚úÖ {message}")

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏—Ä—ñ –¥–∞–Ω—ñ –∑–≥—ñ–¥–Ω–æ –∑–∞–≤–¥–∞–Ω—å
        extractors = {
            'courier_delivery': self.extract_courier_delivery_data,
            'delivery_periodic': self.extract_delivery_periodic_data
        }

        results = {}

        for name, extractor in extractors.items():
            print(f"\nüì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è {name} —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö...")
            results[name] = extractor()

        # –ü—ñ–¥—Å—É–º–æ–∫
        successful = sum(1 for result in results.values() if result.get('success', False))
        total = len(results)

        print(f"\nüìä –ü—ñ–¥—Å—É–º–æ–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö –∑ DW: {successful}/{total} —É—Å–ø—ñ—à–Ω–æ")

        return results